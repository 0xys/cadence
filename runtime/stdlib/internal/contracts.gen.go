// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (4.731kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xe3\x36\x13\x7d\xf7\xaf\x98\x2f\x4f\x09\x3e\xaf\x92\x02\x45\x51\x08\xd0\x06\xdb\x76\xb7\x0d\xb2\x45\x8b\x64\xd3\x3c\x04\xc1\x2e\x63\x8d\x2d\x22\x5a\xca\x20\x47\x4e\xdc\xc0\xff\xbd\x20\xa9\x0b\x6f\x4a\x9d\x36\xd5\x8b\x65\xf1\x70\x78\xe6\x72\x46\xa4\x66\xeb\xf6\x0e\x14\xc9\x76\x41\xc0\x05\xa1\x5c\xb2\x05\xc2\x2f\x4c\x55\x28\x01\x9e\x66\x33\x00\x00\x8d\x59\xb6\x02\x2a\xa6\xaa\x43\xf3\x44\x5f\x25\x23\x96\xc3\xcd\xd5\x99\xa0\xef\x6f\xe7\xc3\x63\x62\xab\x1c\x2e\x49\x72\xb1\x1a\x1f\xb2\x7a\xd5\x48\x4e\xd5\xd7\xdc\xd8\x7e\xd7\xff\x35\x80\xa3\xc1\xca\x6c\x37\x33\x84\x16\x8d\x20\xc9\x16\x04\x3f\xca\xed\x9a\x9a\x24\x8f\xcf\x01\x81\xc9\x35\x46\xf3\xf0\x34\x10\x92\x48\xad\x14\xa0\xb0\x5e\x66\xda\xdc\x35\xa7\xea\x13\x5b\x1d\x6a\x9b\x73\xeb\xc3\xc1\x81\x67\x73\xb8\x3d\x32\x46\x76\x31\xa5\xde\x46\xc4\xcc\x0d\xc9\xbf\xa3\x89\xd2\xfc\x1c\xda\x05\x1c\xb2\xc4\x56\x7b\xb2\xed\x92\x7d\x8e\xdb\x8f\x5c\xd1\x7b\x41\x72\xeb\x2c\xa8\x11\x35\x12\xdc\xe3\xf6\x4c\x94\xf8\x98\xc3\x99\xa0\x68\x74\xdd\xde\xd5\x7c\x71\x8e\xdb\x1c\x7e\xef\x6f\x23\x50\xe5\x7a\x97\xca\xbb\x0b\x7e\x40\xbe\xaa\x28\x87\xab\x0f\xfc\xf1\xbb\x6f\xa3\x61\xae\x2e\x70\xd3\xdc\x63\x99\xc3\x0f\x4d\x53\xcf\x06\x00\x17\x9c\xc6\x92\xd4\x97\xc7\x7c\xee\x0d\xa5\x68\xfb\x88\xe7\x38\xfb\x48\x9f\xb0\x3f\x16\xb2\xed\x9f\x1f\x39\x81\xd6\x97\x49\x6b\xcf\x17\x8a\x81\x7a\x0c\x1a\x98\x43\x31\x7a\x11\xc3\x3c\xfa\x50\xf8\xee\xc4\x70\xeb\x03\x14\x9d\x33\x31\x60\x70\x04\x8a\xd1\xa9\x01\xb6\x7b\xbe\xb4\x7a\xd5\x9a\x51\xc9\x37\x26\x91\x28\x48\x72\x54\x39\xdc\xb8\x05\x78\x1b\x24\x34\x19\xa8\x6e\x2a\x14\x70\x73\xeb\x70\x18\x6e\x8f\x8f\x8f\xe1\x5d\x59\x2a\x60\x20\xf0\x41\x07\x13\x1e\x38\x55\x40\x15\xc2\x8a\x6f\x50\x84\x6e\xf6\xda\x65\x65\xe9\x97\xd0\xe7\xff\xb0\x52\xc6\x62\xc8\x43\x0d\x7a\xb3\x5c\x11\x42\xe1\x45\x20\xab\x51\xac\xa8\x8a\xe0\x68\xec\x14\x9e\x59\xdf\x31\xf0\xf4\xd1\xdf\xcd\x23\x8c\xe3\xfe\x3a\xed\x7e\x22\x04\xd5\x74\x08\xdc\x30\xd8\xdf\x78\xdc\x11\xcd\x92\xd5\x0a\x3d\xc0\xd1\x64\x39\x64\x6c\xbd\x46\x51\x1e\x1a\xe7\x7d\x58\xd7\x3c\xcd\xc8\x54\xc1\x5c\x18\x8c\x32\x45\xa2\x2b\x86\x91\x53\x2f\xdc\x44\x07\xf8\x12\x38\x01\x3e\x72\x45\x2a\x0b\x66\x5b\x75\xdc\xe3\x56\x01\x93\x08\xac\x7e\x60\x5b\xd5\xad\x8c\xe5\x1c\xee\x5a\x63\x70\x0b\x15\xdb\x20\x7c\x19\x9c\xfc\x02\x4b\x8e\x75\x09\x0a\x09\xa8\x01\x92\x2d\x46\x75\xb9\x42\x3a\xf4\xba\x59\x50\x32\xa7\x81\x4a\xf8\x72\xac\x98\xb7\xc9\x92\x09\x26\x38\x41\x12\xbc\xf6\x86\x76\xb3\x54\x28\x5d\x93\x37\xfd\x5a\x93\x62\xfc\x95\xc9\xfb\xe7\x22\x0b\xd2\xc6\xc2\x46\xa9\x6c\x50\x81\x68\x08\x4a\xac\x91\x10\x78\x2c\x54\x8b\x0f\x62\xf2\x7a\x41\x08\x02\xe0\xfe\xd3\xf2\x5a\xb4\x52\xa2\xe8\xd4\x5a\xfc\x5d\x2c\x20\xa8\xd3\x11\xf2\x02\x85\xba\x4b\x66\x7b\xc9\xd5\x9b\xb1\xbf\x76\xbd\x69\x7b\x0a\xd9\x9b\xb3\x87\xaa\xbd\x1a\x07\x4f\xd4\x53\xa2\x94\x2d\xea\x84\x8e\x75\xa3\xf8\x4a\x30\x6a\x25\x5a\xb9\x6d\x58\xcd\x4b\x58\x36\x32\x80\x60\x69\xf6\x46\x51\x01\x6d\x50\xf2\x65\x10\xf1\xc1\xe4\x25\xd2\xf8\x5a\xba\xec\x9f\xde\xce\x23\x34\x96\x3f\xb9\xfb\x3b\xb7\xa3\xeb\xd7\x7d\xd8\xc9\x37\x4c\x5a\xa2\xd7\x26\x46\xaa\x7f\x13\x40\x01\x27\xd9\x49\xdc\xf5\x15\xa2\x38\x37\xb9\xe6\x0b\xfd\xa6\x7c\x3a\x13\x64\x2d\xef\xa0\x80\xa7\x40\x99\xda\xf9\xc1\x05\xe0\xc2\xf3\x27\xa4\x62\x03\x0c\xef\x85\xd2\xe0\x5e\x99\x56\x8c\x5c\x59\x96\xf1\x0c\xbe\x1c\x8d\x66\x2f\x17\x17\x8c\xfd\x23\x6e\xec\x10\xf7\x9a\x90\x24\x57\x0e\xcb\x8a\xd9\x26\xc1\x6a\x89\xac\xdc\xc2\x1d\xea\x94\x23\x8a\x34\x6d\x2f\x94\x37\xb1\x17\xb7\x70\x7a\x6a\x59\xbd\x1e\xf1\x0b\x5c\x34\xb2\x0c\xa2\xfb\xc0\xd4\x04\xcd\x3d\x38\x16\x56\x3b\xa9\xc5\x7e\x46\xdb\x56\xd9\x82\x5a\x56\xeb\x05\x63\x58\xb7\x95\x08\x7b\x56\x62\xa5\xbd\xaa\xc5\x26\xa0\xeb\xdd\xc9\xb0\xdf\xe3\xd6\xd9\x3a\xbe\x7e\x45\xa0\x5b\xf1\xcf\x95\xed\xff\x34\x93\xa1\x0b\x66\x29\xf9\x0f\x69\xe8\x2d\xe6\x4e\xb1\x0f\x77\x71\x63\x83\xa0\x19\x8c\xf7\x69\x6c\xd9\x7c\x65\x5c\x5c\xe2\x9a\x49\x46\xbc\x11\x9f\xf4\xa9\xcd\x1e\x6f\xb3\xc4\xd8\x95\x42\x99\x36\xe4\x77\x6e\xed\xe0\xf4\x2e\x1f\x12\x87\x8e\xfe\x7a\x69\x02\xdc\x16\x06\x85\xff\xf7\xff\x26\xe5\x89\x53\x44\x7a\x1b\xe1\xcd\x7d\x5b\xc0\x37\xd9\xc9\xbe\x87\x8a\xa1\x2f\xbf\xf8\xcc\xea\x24\xb8\x6f\xdc\x1e\xc6\x1c\x3c\xfc\xc3\x63\x62\xce\x3f\x3f\xc2\x8d\x25\x5b\x8c\x76\x27\xdc\xee\x4f\x4b\x13\x85\xd1\x7f\x4c\x08\xd0\xf6\x03\x41\x0e\x4f\xf6\xf3\x4d\x67\xcc\xf8\x15\x0e\x1d\xb9\x6f\x06\xe7\xeb\x42\x77\x66\x44\xe9\xbe\x90\xe1\x4c\x70\xe2\xac\xe6\x7f\x22\x2c\x1a\xa1\x88\x09\x52\xc1\xf4\x09\xa6\x50\xc0\xc1\x87\x8f\xbf\x5d\xbf\xf9\xe3\x24\x3b\x79\xd3\x2a\x94\x07\x9d\xa3\xbb\xd9\x5f\x01\x00\x00\xff\xff\xb6\x87\xfa\xd3\x7b\x12\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xc6, 0xc2, 0xfe, 0x50, 0x3a, 0x46, 0x28, 0x89, 0x1b, 0x25, 0xc5, 0xd2, 0xde, 0x72, 0x98, 0x53, 0xe0, 0x3c, 0x6, 0xfb, 0xca, 0x92, 0x45, 0xa2, 0xe, 0x1b, 0x4e, 0xa4, 0x91, 0x2e, 0xcc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
