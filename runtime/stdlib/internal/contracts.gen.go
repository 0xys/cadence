// Code generated by go-bindata. DO NOT EDIT.
// sources:
// contracts/crypto.cdc (4.732kB)

package internal

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contractsCryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xcb\x53\x82\xb9\x6a\x06\x0c\xc3\x20\x40\x0d\xba\xad\xdd\x82\x74\xd8\x90\x34\xcd\x43\x10\xb4\x8c\x75\xb6\x88\xa8\x94\x41\x9e\x9c\x78\x81\xff\xf7\x81\xa4\x7e\xf0\x97\x32\x67\xcb\xf4\x62\x59\xfc\x78\xfc\xee\xee\xbb\x13\xa9\xd9\xba\xbd\x05\x45\xb2\x5d\x10\x70\x41\x28\x97\x6c\x81\xf0\x1b\x53\x15\x4a\x80\xc7\xd9\x0c\x00\x40\x63\x96\xad\x80\x8a\xa9\xea\xd0\x3c\xd1\x57\xc9\x88\xe5\x70\x7d\x79\x2a\xe8\xc7\x9b\xf9\xf0\x98\xd8\x2a\x87\x0b\x92\x5c\xac\xc6\x87\xac\x5e\x35\x92\x53\xf5\x35\x37\xb6\xdf\xf6\x7f\x0d\xe0\x68\xb0\x32\xdb\xcd\x0c\xa1\x45\x23\x48\xb2\x05\xc1\xcf\x72\xbb\xa6\x26\xc9\xe3\x73\x40\x60\x72\x8d\xd1\x3c\x3c\x0e\x84\x24\x52\x2b\x05\x28\xac\x97\x99\x36\x77\xc5\xa9\xfa\xc8\x56\x87\xda\xe6\xdc\xfa\x70\x70\xe0\xd9\x1c\x6e\x8f\x8c\x91\x5d\x4c\xa9\xb7\x11\x31\x73\x43\xf2\xdf\x68\xa2\x34\x3f\x87\x76\x01\x87\x2c\xb1\xd5\x9e\x6c\xbb\x64\x9f\xe1\xf6\x03\x57\xf4\x4e\x90\xdc\x3a\x0b\x6a\x44\x8d\x04\x77\xb8\x3d\x15\x25\x3e\xe4\x70\x2a\x28\x1a\x5d\xb7\xb7\x35\x5f\x9c\xe1\x36\x87\x3f\xfb\xdb\x08\x54\xb9\xde\xa5\xf2\xee\x82\xef\x91\xaf\x2a\xca\xe1\xf2\x3d\x7f\xf8\xe1\xfb\x68\x98\xab\x73\xdc\x34\x77\x58\xe6\xf0\x53\xd3\xd4\xb3\x01\xc0\x05\xa7\x51\x92\xfa\xf2\x98\xcf\xbd\xa1\x14\x6d\x1f\xf1\x14\x67\x1f\xe9\x13\xf6\xc7\x42\xb6\xfd\xf3\x23\x27\xd0\xfa\x32\x69\xed\xf9\x42\x31\x50\x8f\x41\x03\x73\x28\x46\x2f\x62\x98\x47\x1f\x0a\xdf\x9d\x18\x6e\x7d\x80\xa2\x73\x26\x06\x0c\x8e\x40\x31\x3a\x35\xc0\x76\x4f\x4b\xab\xaf\x5a\x33\x2a\xf9\xc6\x24\x12\x05\x49\x8e\x2a\x87\x6b\x57\x80\x37\x41\x42\x93\x81\xea\xa6\x42\x01\xd7\x37\x0e\x87\xe1\xf6\xf5\xeb\xd7\xf0\xb6\x2c\x15\x30\x10\x78\xaf\x83\x09\xf7\x9c\x2a\xa0\x0a\x61\xc5\x37\x28\x42\x37\xfb\xda\x65\x65\xe9\x4b\xe8\xf3\xff\xa8\x94\x51\x0c\x79\x58\x83\xde\x2c\xb7\x08\xa1\xf0\x22\x90\xd5\x28\x56\x54\x45\x70\x34\x76\x0a\xcf\xac\xef\x18\x78\xf5\xd1\xdf\xcd\x23\x8c\xe3\xfe\x3a\xed\x7e\x22\x04\xd5\x74\x08\xdc\x30\xd8\xdf\x78\xdc\x29\x9a\x25\xab\x15\x7a\x80\xa3\x49\x39\x64\x6c\xbd\x46\x51\x1e\x1a\xe7\x7d\x58\xd7\x3c\xcd\xc8\x94\x60\xce\x0d\x46\x19\x91\x68\xc5\x30\x72\xf4\xc2\x4d\x74\x80\x2f\x81\x13\xe0\x03\x57\xa4\xb2\x60\xb6\xad\x8e\x3b\xdc\x2a\x60\x12\x81\xd5\xf7\x6c\xab\xba\x95\xb1\x9c\xc3\x6d\x6b\x0c\x6e\xa1\x62\x1b\x84\x2f\x83\x93\x5f\x60\xc9\xb1\x2e\x41\x21\x01\x35\x40\xb2\xc5\x48\x97\x2b\xa4\x43\xaf\x9b\x05\x92\x39\x09\xaa\x84\x2f\x47\xc5\xbc\x49\x4a\x26\x98\xe0\x04\x49\xf0\xda\x1b\xda\xcd\x52\xa1\x74\x4d\x5e\xf7\x6b\x4d\x16\xe3\xef\x4c\xde\x3d\x15\x59\x90\x36\x16\x36\x4a\x65\x83\x0a\x44\x43\x50\x62\x8d\x84\xc0\xe3\x42\xb5\xf8\x20\x26\x2f\x17\x84\x20\x00\xee\x3f\x5d\x5e\x8b\x56\x4a\x14\x5d\xb5\x16\xff\x14\x0b\x08\x74\x3a\x42\x9e\x51\xa1\xee\x92\xd9\x5e\xe5\xea\xcd\xd8\xbf\x76\xbd\x69\x7b\x16\xb2\x37\x67\x8f\xaa\xf6\x34\x0e\x5e\x51\x4f\x15\xa5\x6c\x51\x27\x74\xd4\x8d\xe2\x2b\xc1\xa8\x95\x68\xcb\x6d\xc3\x6a\x5e\xc2\xb2\x91\x01\x04\x4b\xb3\x37\x8a\x04\xc4\xd5\x27\x3d\xc3\x0f\xf9\x60\xf3\x02\x69\x7c\x2f\x5d\xf4\x4f\x6f\xe6\x11\x1a\xcb\x5f\xdc\x0d\x9e\xdb\xd2\xf5\xfb\x3e\x6c\xe5\x1b\x26\x2d\xd3\x2b\x13\x24\xd5\xbf\x0a\xa0\x80\xe3\xec\x38\x6e\xfb\x0a\x51\x9c\x99\x64\xf3\x85\x7e\x55\x3e\x9e\x0a\xb2\x96\x77\x50\xc0\x63\x50\x9a\xda\xfb\xc1\x05\xe0\xc2\xf3\x27\xa4\x62\x23\x0c\xef\x84\xd2\xe0\xbe\x34\x6d\x35\x72\x65\x59\xc6\x33\xf8\x72\x34\x9a\x3d\xbf\xba\x60\x6c\x20\x71\x67\x87\xb8\xd9\x84\x24\xb9\x72\x58\x56\xcc\x76\x09\x56\x4b\x64\xe5\x16\x6e\x51\xe7\x1c\x51\xa4\x69\x7b\xa1\xbc\x8e\xbd\xb8\x81\x93\x13\xcb\xea\xe5\x88\x9f\xe3\xa2\x91\x65\x10\xdd\x7b\xa6\x26\x68\xee\xc1\xb1\xb0\xc5\x93\x5a\xec\x57\xb4\x7d\x95\x2d\xa8\x65\xb5\x5e\x30\x86\x75\x7b\x89\xb0\x69\x25\x56\xda\x4b\x2d\x36\x01\x5d\xf3\x4e\x86\xfd\x0e\xb7\xce\xde\xf1\xe5\x15\x81\xae\xe2\x9f\x92\xed\x37\x9a\xc9\xd0\x06\xb3\x0d\x4a\xbe\x4c\x74\x5c\x70\xdb\x40\xee\x88\x7d\xb8\x8b\x3b\x1b\x04\xcd\x60\xbc\x4f\x63\xcb\xe6\x2b\xe3\xe2\x02\xd7\x4c\x32\xe2\x8d\xf8\xa8\x8f\x6d\xf6\x7c\x9b\x25\xc6\x2e\x15\xca\xb4\x21\xbf\x75\x6b\x07\xa7\xb7\xf9\x90\x38\x75\xf4\xd7\x73\x13\xe0\xb6\x30\x28\xfc\xbf\xdf\x9a\x94\x27\x8e\x11\xe9\x7d\x84\x37\xf7\x4d\x01\xdf\x65\xc7\xfb\x9e\x2a\x86\xbe\xfc\xec\x43\xab\x93\xe0\xbe\x71\x7b\x18\x73\xf2\xf0\x4f\x8f\x89\x39\xff\xfe\x0c\x37\x4a\xb6\x18\xed\x4e\xb8\xdd\x1f\x97\x26\x84\xd1\x7f\x4d\x08\xd0\xf6\x0b\x41\x0e\x8f\xf6\xfb\x4d\x67\xcc\xf8\x15\x0e\x1d\xb9\x6f\x06\xe7\xf3\x42\x77\x68\x44\xe9\xbe\x91\xe1\x54\x70\xe2\xac\xe6\x7f\x21\x2c\x1a\xa1\x88\x09\x52\xc1\xf4\x09\xa6\x50\xc0\xc1\xfb\x0f\x7f\x5c\xbd\xfa\x74\x9c\x1d\xbf\x6a\x15\xca\x83\xce\xd1\xdd\xec\xef\x00\x00\x00\xff\xff\x9b\x16\x11\x4b\x7c\x12\x00\x00"

func contractsCryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_contractsCryptoCdc,
		"contracts/crypto.cdc",
	)
}

func contractsCryptoCdc() (*asset, error) {
	bytes, err := contractsCryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts/crypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x34, 0xb2, 0xfd, 0x7d, 0x31, 0xca, 0xf2, 0xff, 0x3e, 0x50, 0xc, 0xe3, 0x78, 0x6b, 0x9c, 0xc4, 0xc5, 0x9a, 0xe9, 0x85, 0xac, 0x95, 0x7b, 0x23, 0xca, 0x5d, 0xd, 0x62, 0x6d, 0xd3, 0x1a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"contracts/crypto.cdc": contractsCryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"contracts": {nil, map[string]*bintree{
		"crypto.cdc": {contractsCryptoCdc, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
