// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindAccountCapabilityValue-13]
	_ = x[MemoryKindLinkValue-14]
	_ = x[MemoryKindAccountLinkValue-15]
	_ = x[MemoryKindStorageReferenceValue-16]
	_ = x[MemoryKindEphemeralReferenceValue-17]
	_ = x[MemoryKindInterpretedFunctionValue-18]
	_ = x[MemoryKindHostFunctionValue-19]
	_ = x[MemoryKindBoundFunctionValue-20]
	_ = x[MemoryKindBigInt-21]
	_ = x[MemoryKindSimpleCompositeValue-22]
	_ = x[MemoryKindPublishedValue-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoidValue-43]
	_ = x[MemoryKindCadenceOptionalValue-44]
	_ = x[MemoryKindCadenceBoolValue-45]
	_ = x[MemoryKindCadenceStringValue-46]
	_ = x[MemoryKindCadenceCharacterValue-47]
	_ = x[MemoryKindCadenceAddressValue-48]
	_ = x[MemoryKindCadenceIntValue-49]
	_ = x[MemoryKindCadenceNumberValue-50]
	_ = x[MemoryKindCadenceArrayValueBase-51]
	_ = x[MemoryKindCadenceArrayValueLength-52]
	_ = x[MemoryKindCadenceDictionaryValue-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructValueBase-55]
	_ = x[MemoryKindCadenceStructValueSize-56]
	_ = x[MemoryKindCadenceResourceValueBase-57]
	_ = x[MemoryKindCadenceResourceValueSize-58]
	_ = x[MemoryKindCadenceEventValueBase-59]
	_ = x[MemoryKindCadenceEventValueSize-60]
	_ = x[MemoryKindCadenceContractValueBase-61]
	_ = x[MemoryKindCadenceContractValueSize-62]
	_ = x[MemoryKindCadenceEnumValueBase-63]
	_ = x[MemoryKindCadenceEnumValueSize-64]
	_ = x[MemoryKindCadenceLinkValue-65]
	_ = x[MemoryKindCadencePathValue-66]
	_ = x[MemoryKindCadenceTypeValue-67]
	_ = x[MemoryKindCadenceStorageCapabilityValue-68]
	_ = x[MemoryKindCadenceFunctionValue-69]
	_ = x[MemoryKindCadenceSimpleType-70]
	_ = x[MemoryKindCadenceOptionalType-71]
	_ = x[MemoryKindCadenceVariableSizedArrayType-72]
	_ = x[MemoryKindCadenceConstantSizedArrayType-73]
	_ = x[MemoryKindCadenceDictionaryType-74]
	_ = x[MemoryKindCadenceField-75]
	_ = x[MemoryKindCadenceParameter-76]
	_ = x[MemoryKindCadenceStructType-77]
	_ = x[MemoryKindCadenceResourceType-78]
	_ = x[MemoryKindCadenceEventType-79]
	_ = x[MemoryKindCadenceContractType-80]
	_ = x[MemoryKindCadenceStructInterfaceType-81]
	_ = x[MemoryKindCadenceResourceInterfaceType-82]
	_ = x[MemoryKindCadenceContractInterfaceType-83]
	_ = x[MemoryKindCadenceFunctionType-84]
	_ = x[MemoryKindCadenceReferenceType-85]
	_ = x[MemoryKindCadenceRestrictedType-86]
	_ = x[MemoryKindCadenceCapabilityType-87]
	_ = x[MemoryKindCadenceEnumType-88]
	_ = x[MemoryKindRawString-89]
	_ = x[MemoryKindAddressLocation-90]
	_ = x[MemoryKindBytes-91]
	_ = x[MemoryKindVariable-92]
	_ = x[MemoryKindCompositeTypeInfo-93]
	_ = x[MemoryKindCompositeField-94]
	_ = x[MemoryKindInvocation-95]
	_ = x[MemoryKindStorageMap-96]
	_ = x[MemoryKindStorageKey-97]
	_ = x[MemoryKindTypeToken-98]
	_ = x[MemoryKindErrorToken-99]
	_ = x[MemoryKindSpaceToken-100]
	_ = x[MemoryKindProgram-101]
	_ = x[MemoryKindIdentifier-102]
	_ = x[MemoryKindArgument-103]
	_ = x[MemoryKindBlock-104]
	_ = x[MemoryKindFunctionBlock-105]
	_ = x[MemoryKindParameter-106]
	_ = x[MemoryKindParameterList-107]
	_ = x[MemoryKindTransfer-108]
	_ = x[MemoryKindMembers-109]
	_ = x[MemoryKindTypeAnnotation-110]
	_ = x[MemoryKindDictionaryEntry-111]
	_ = x[MemoryKindFunctionDeclaration-112]
	_ = x[MemoryKindCompositeDeclaration-113]
	_ = x[MemoryKindInterfaceDeclaration-114]
	_ = x[MemoryKindEnumCaseDeclaration-115]
	_ = x[MemoryKindFieldDeclaration-116]
	_ = x[MemoryKindTransactionDeclaration-117]
	_ = x[MemoryKindImportDeclaration-118]
	_ = x[MemoryKindVariableDeclaration-119]
	_ = x[MemoryKindSpecialFunctionDeclaration-120]
	_ = x[MemoryKindPragmaDeclaration-121]
	_ = x[MemoryKindAssignmentStatement-122]
	_ = x[MemoryKindBreakStatement-123]
	_ = x[MemoryKindContinueStatement-124]
	_ = x[MemoryKindEmitStatement-125]
	_ = x[MemoryKindExpressionStatement-126]
	_ = x[MemoryKindForStatement-127]
	_ = x[MemoryKindIfStatement-128]
	_ = x[MemoryKindReturnStatement-129]
	_ = x[MemoryKindSwapStatement-130]
	_ = x[MemoryKindSwitchStatement-131]
	_ = x[MemoryKindWhileStatement-132]
	_ = x[MemoryKindBooleanExpression-133]
	_ = x[MemoryKindVoidExpression-134]
	_ = x[MemoryKindNilExpression-135]
	_ = x[MemoryKindStringExpression-136]
	_ = x[MemoryKindIntegerExpression-137]
	_ = x[MemoryKindFixedPointExpression-138]
	_ = x[MemoryKindArrayExpression-139]
	_ = x[MemoryKindDictionaryExpression-140]
	_ = x[MemoryKindIdentifierExpression-141]
	_ = x[MemoryKindInvocationExpression-142]
	_ = x[MemoryKindMemberExpression-143]
	_ = x[MemoryKindIndexExpression-144]
	_ = x[MemoryKindConditionalExpression-145]
	_ = x[MemoryKindUnaryExpression-146]
	_ = x[MemoryKindBinaryExpression-147]
	_ = x[MemoryKindFunctionExpression-148]
	_ = x[MemoryKindCastingExpression-149]
	_ = x[MemoryKindCreateExpression-150]
	_ = x[MemoryKindDestroyExpression-151]
	_ = x[MemoryKindReferenceExpression-152]
	_ = x[MemoryKindForceExpression-153]
	_ = x[MemoryKindPathExpression-154]
	_ = x[MemoryKindConstantSizedType-155]
	_ = x[MemoryKindDictionaryType-156]
	_ = x[MemoryKindFunctionType-157]
	_ = x[MemoryKindInstantiationType-158]
	_ = x[MemoryKindNominalType-159]
	_ = x[MemoryKindOptionalType-160]
	_ = x[MemoryKindReferenceType-161]
	_ = x[MemoryKindRestrictedType-162]
	_ = x[MemoryKindVariableSizedType-163]
	_ = x[MemoryKindPosition-164]
	_ = x[MemoryKindRange-165]
	_ = x[MemoryKindElaboration-166]
	_ = x[MemoryKindActivation-167]
	_ = x[MemoryKindActivationEntries-168]
	_ = x[MemoryKindVariableSizedSemaType-169]
	_ = x[MemoryKindConstantSizedSemaType-170]
	_ = x[MemoryKindDictionarySemaType-171]
	_ = x[MemoryKindOptionalSemaType-172]
	_ = x[MemoryKindRestrictedSemaType-173]
	_ = x[MemoryKindReferenceSemaType-174]
	_ = x[MemoryKindCapabilitySemaType-175]
	_ = x[MemoryKindOrderedMap-176]
	_ = x[MemoryKindOrderedMapEntryList-177]
	_ = x[MemoryKindOrderedMapEntry-178]
	_ = x[MemoryKindLast-179]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValueAccountCapabilityValueLinkValueAccountLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 205, 214, 230, 251, 274, 298, 315, 333, 339, 359, 373, 391, 413, 438, 454, 474, 497, 524, 540, 559, 578, 597, 620, 643, 663, 681, 701, 720, 740, 758, 774, 794, 810, 828, 849, 868, 883, 901, 922, 945, 967, 986, 1008, 1030, 1054, 1078, 1099, 1120, 1144, 1168, 1188, 1208, 1224, 1240, 1256, 1285, 1305, 1322, 1341, 1370, 1399, 1420, 1432, 1448, 1465, 1484, 1500, 1519, 1545, 1573, 1601, 1620, 1640, 1661, 1682, 1697, 1706, 1721, 1726, 1734, 1751, 1765, 1775, 1785, 1795, 1804, 1814, 1824, 1831, 1841, 1849, 1854, 1867, 1876, 1889, 1897, 1904, 1918, 1933, 1952, 1972, 1992, 2011, 2027, 2049, 2066, 2085, 2111, 2128, 2147, 2161, 2178, 2191, 2210, 2222, 2233, 2248, 2261, 2276, 2290, 2307, 2321, 2334, 2350, 2367, 2387, 2402, 2422, 2442, 2462, 2478, 2493, 2514, 2529, 2545, 2563, 2580, 2596, 2613, 2632, 2647, 2661, 2678, 2692, 2704, 2721, 2732, 2744, 2757, 2771, 2788, 2796, 2801, 2812, 2822, 2839, 2860, 2881, 2899, 2915, 2933, 2950, 2968, 2978, 2997, 3012, 3016}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
