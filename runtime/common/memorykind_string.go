// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArray-7]
	_ = x[MemoryKindDictionary-8]
	_ = x[MemoryKindComposite-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindRawString-23]
	_ = x[MemoryKindAddressLocation-24]
	_ = x[MemoryKindBytes-25]
	_ = x[MemoryKindVariable-26]
	_ = x[MemoryKindTokenIdentifier-27]
	_ = x[MemoryKindTokenComment-28]
	_ = x[MemoryKindTokenNumericLiteral-29]
	_ = x[MemoryKindTokenSyntax-30]
	_ = x[MemoryKindProgram-31]
	_ = x[MemoryKindIdentifier-32]
	_ = x[MemoryKindArgument-33]
	_ = x[MemoryKindBlock-34]
	_ = x[MemoryKindFunctionBlock-35]
	_ = x[MemoryKindParameter-36]
	_ = x[MemoryKindParameterList-37]
	_ = x[MemoryKindTransfer-38]
	_ = x[MemoryKindMembers-39]
	_ = x[MemoryKindTypeAnnotation-40]
	_ = x[MemoryKindDictionaryEntry-41]
	_ = x[MemoryKindFunctionDeclaration-42]
	_ = x[MemoryKindCompositeDeclaration-43]
	_ = x[MemoryKindInterfaceDeclaration-44]
	_ = x[MemoryKindEnumCaseDeclaration-45]
	_ = x[MemoryKindFieldDeclaration-46]
	_ = x[MemoryKindTransactionDeclaration-47]
	_ = x[MemoryKindImportDeclaration-48]
	_ = x[MemoryKindVariableDeclaration-49]
	_ = x[MemoryKindSpecialFunctionDeclaration-50]
	_ = x[MemoryKindPragmaDeclaration-51]
	_ = x[MemoryKindAssignmentStatement-52]
	_ = x[MemoryKindBreakStatement-53]
	_ = x[MemoryKindContinueStatement-54]
	_ = x[MemoryKindEmitStatement-55]
	_ = x[MemoryKindExpressionStatement-56]
	_ = x[MemoryKindForStatement-57]
	_ = x[MemoryKindIfStatement-58]
	_ = x[MemoryKindReturnStatement-59]
	_ = x[MemoryKindSwapStatement-60]
	_ = x[MemoryKindSwitchStatement-61]
	_ = x[MemoryKindWhileStatement-62]
	_ = x[MemoryKindBooleanExpression-63]
	_ = x[MemoryKindNilExpression-64]
	_ = x[MemoryKindStringExpression-65]
	_ = x[MemoryKindIntegerExpression-66]
	_ = x[MemoryKindFixedPointExpression-67]
	_ = x[MemoryKindArrayExpression-68]
	_ = x[MemoryKindDictionaryExpression-69]
	_ = x[MemoryKindIdentifierExpression-70]
	_ = x[MemoryKindInvocationExpression-71]
	_ = x[MemoryKindMemberExpression-72]
	_ = x[MemoryKindIndexExpression-73]
	_ = x[MemoryKindConditionalExpression-74]
	_ = x[MemoryKindUnaryExpression-75]
	_ = x[MemoryKindBinaryExpression-76]
	_ = x[MemoryKindFunctionExpression-77]
	_ = x[MemoryKindCastingExpression-78]
	_ = x[MemoryKindCreateExpression-79]
	_ = x[MemoryKindDestroyExpression-80]
	_ = x[MemoryKindReferenceExpression-81]
	_ = x[MemoryKindForceExpression-82]
	_ = x[MemoryKindPathExpression-83]
	_ = x[MemoryKindConstantSizedType-84]
	_ = x[MemoryKindDictionaryType-85]
	_ = x[MemoryKindFunctionType-86]
	_ = x[MemoryKindInstantiationType-87]
	_ = x[MemoryKindNominalType-88]
	_ = x[MemoryKindOptionalType-89]
	_ = x[MemoryKindReferenceType-90]
	_ = x[MemoryKindRestrictedType-91]
	_ = x[MemoryKindVariableSizedType-92]
	_ = x[MemoryKindPosition-93]
	_ = x[MemoryKindRange-94]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayDictionaryCompositeOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntRawStringAddressLocationBytesVariableTokenIdentifierTokenCommentTokenNumericLiteralTokenSyntaxProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRange"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 52, 62, 71, 79, 82, 86, 95, 104, 119, 128, 149, 172, 191, 203, 216, 222, 231, 246, 251, 259, 274, 286, 305, 316, 323, 333, 341, 346, 359, 368, 381, 389, 396, 410, 425, 444, 464, 484, 503, 519, 541, 558, 577, 603, 620, 639, 653, 670, 683, 702, 714, 725, 740, 753, 768, 782, 799, 812, 828, 845, 865, 880, 900, 920, 940, 956, 971, 992, 1007, 1023, 1041, 1058, 1074, 1091, 1110, 1125, 1139, 1156, 1170, 1182, 1199, 1210, 1222, 1235, 1249, 1266, 1274, 1279}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
