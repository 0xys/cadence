// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindNumber-5]
	_ = x[MemoryKindArrayBase-6]
	_ = x[MemoryKindDictionaryBase-7]
	_ = x[MemoryKindCompositeBase-8]
	_ = x[MemoryKindSimpleCompositeBase-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleComposite-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoid-43]
	_ = x[MemoryKindCadenceOptional-44]
	_ = x[MemoryKindCadenceBool-45]
	_ = x[MemoryKindCadenceString-46]
	_ = x[MemoryKindCadenceCharacter-47]
	_ = x[MemoryKindCadenceAddress-48]
	_ = x[MemoryKindCadenceInt-49]
	_ = x[MemoryKindCadenceNumber-50]
	_ = x[MemoryKindCadenceArrayBase-51]
	_ = x[MemoryKindCadenceArrayLength-52]
	_ = x[MemoryKindCadenceDictionaryBase-53]
	_ = x[MemoryKindCadenceDictionarySize-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructBase-56]
	_ = x[MemoryKindCadenceStructSize-57]
	_ = x[MemoryKindCadenceResourceBase-58]
	_ = x[MemoryKindCadenceResourceSize-59]
	_ = x[MemoryKindCadenceEventBase-60]
	_ = x[MemoryKindCadenceEventSize-61]
	_ = x[MemoryKindCadenceContractBase-62]
	_ = x[MemoryKindCadenceContractSize-63]
	_ = x[MemoryKindCadenceEnumBase-64]
	_ = x[MemoryKindCadenceEnumSize-65]
	_ = x[MemoryKindCadenceLink-66]
	_ = x[MemoryKindCadencePath-67]
	_ = x[MemoryKindCadenceTypeValue-68]
	_ = x[MemoryKindCadenceCapability-69]
	_ = x[MemoryKindCadenceSimpleType-70]
	_ = x[MemoryKindCadenceOptionalType-71]
	_ = x[MemoryKindCadenceVariableSizedArrayType-72]
	_ = x[MemoryKindCadenceConstantSizedArrayType-73]
	_ = x[MemoryKindCadenceDictionaryType-74]
	_ = x[MemoryKindCadenceField-75]
	_ = x[MemoryKindCadenceParameter-76]
	_ = x[MemoryKindCadenceStructType-77]
	_ = x[MemoryKindCadenceResourceType-78]
	_ = x[MemoryKindCadenceEventType-79]
	_ = x[MemoryKindCadenceContractType-80]
	_ = x[MemoryKindCadenceStructInterfaceType-81]
	_ = x[MemoryKindCadenceResourceInterfaceType-82]
	_ = x[MemoryKindCadenceContractInterfaceType-83]
	_ = x[MemoryKindCadenceFunctionType-84]
	_ = x[MemoryKindCadenceReferenceType-85]
	_ = x[MemoryKindCadenceRestrictedType-86]
	_ = x[MemoryKindCadenceCapabilityType-87]
	_ = x[MemoryKindCadenceEnumType-88]
	_ = x[MemoryKindRawString-89]
	_ = x[MemoryKindAddressLocation-90]
	_ = x[MemoryKindBytes-91]
	_ = x[MemoryKindVariable-92]
	_ = x[MemoryKindCompositeTypeInfo-93]
	_ = x[MemoryKindCompositeField-94]
	_ = x[MemoryKindInvocation-95]
	_ = x[MemoryKindStorageMap-96]
	_ = x[MemoryKindStorageKey-97]
	_ = x[MemoryKindValueToken-98]
	_ = x[MemoryKindSyntaxToken-99]
	_ = x[MemoryKindSpaceToken-100]
	_ = x[MemoryKindProgram-101]
	_ = x[MemoryKindIdentifier-102]
	_ = x[MemoryKindArgument-103]
	_ = x[MemoryKindBlock-104]
	_ = x[MemoryKindFunctionBlock-105]
	_ = x[MemoryKindParameter-106]
	_ = x[MemoryKindParameterList-107]
	_ = x[MemoryKindTransfer-108]
	_ = x[MemoryKindMembers-109]
	_ = x[MemoryKindTypeAnnotation-110]
	_ = x[MemoryKindDictionaryEntry-111]
	_ = x[MemoryKindFunctionDeclaration-112]
	_ = x[MemoryKindCompositeDeclaration-113]
	_ = x[MemoryKindInterfaceDeclaration-114]
	_ = x[MemoryKindEnumCaseDeclaration-115]
	_ = x[MemoryKindFieldDeclaration-116]
	_ = x[MemoryKindTransactionDeclaration-117]
	_ = x[MemoryKindImportDeclaration-118]
	_ = x[MemoryKindVariableDeclaration-119]
	_ = x[MemoryKindSpecialFunctionDeclaration-120]
	_ = x[MemoryKindPragmaDeclaration-121]
	_ = x[MemoryKindAssignmentStatement-122]
	_ = x[MemoryKindBreakStatement-123]
	_ = x[MemoryKindContinueStatement-124]
	_ = x[MemoryKindEmitStatement-125]
	_ = x[MemoryKindExpressionStatement-126]
	_ = x[MemoryKindForStatement-127]
	_ = x[MemoryKindIfStatement-128]
	_ = x[MemoryKindReturnStatement-129]
	_ = x[MemoryKindSwapStatement-130]
	_ = x[MemoryKindSwitchStatement-131]
	_ = x[MemoryKindWhileStatement-132]
	_ = x[MemoryKindBooleanExpression-133]
	_ = x[MemoryKindNilExpression-134]
	_ = x[MemoryKindStringExpression-135]
	_ = x[MemoryKindIntegerExpression-136]
	_ = x[MemoryKindFixedPointExpression-137]
	_ = x[MemoryKindArrayExpression-138]
	_ = x[MemoryKindDictionaryExpression-139]
	_ = x[MemoryKindIdentifierExpression-140]
	_ = x[MemoryKindInvocationExpression-141]
	_ = x[MemoryKindMemberExpression-142]
	_ = x[MemoryKindIndexExpression-143]
	_ = x[MemoryKindConditionalExpression-144]
	_ = x[MemoryKindUnaryExpression-145]
	_ = x[MemoryKindBinaryExpression-146]
	_ = x[MemoryKindFunctionExpression-147]
	_ = x[MemoryKindCastingExpression-148]
	_ = x[MemoryKindCreateExpression-149]
	_ = x[MemoryKindDestroyExpression-150]
	_ = x[MemoryKindReferenceExpression-151]
	_ = x[MemoryKindForceExpression-152]
	_ = x[MemoryKindPathExpression-153]
	_ = x[MemoryKindConstantSizedType-154]
	_ = x[MemoryKindDictionaryType-155]
	_ = x[MemoryKindFunctionType-156]
	_ = x[MemoryKindInstantiationType-157]
	_ = x[MemoryKindNominalType-158]
	_ = x[MemoryKindOptionalType-159]
	_ = x[MemoryKindReferenceType-160]
	_ = x[MemoryKindRestrictedType-161]
	_ = x[MemoryKindVariableSizedType-162]
	_ = x[MemoryKindPosition-163]
	_ = x[MemoryKindRange-164]
	_ = x[MemoryKindElaboration-165]
	_ = x[MemoryKindActivation-166]
	_ = x[MemoryKindActivationEntries-167]
	_ = x[MemoryKindVariableSizedSemaType-168]
	_ = x[MemoryKindConstantSizedSemaType-169]
	_ = x[MemoryKindDictionarySemaType-170]
	_ = x[MemoryKindOptionalSemaType-171]
	_ = x[MemoryKindRestrictedSemaType-172]
	_ = x[MemoryKindReferenceSemaType-173]
	_ = x[MemoryKindCapabilitySemaType-174]
	_ = x[MemoryKindOrderedMap-175]
	_ = x[MemoryKindOrderedMapEntryList-176]
	_ = x[MemoryKindOrderedMapEntry-177]
	_ = x[MemoryKindLast-178]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 39, 48, 62, 75, 94, 102, 105, 109, 118, 127, 142, 151, 172, 195, 214, 226, 239, 245, 260, 278, 300, 325, 341, 361, 384, 411, 427, 446, 465, 484, 507, 530, 550, 568, 588, 607, 627, 645, 656, 671, 682, 695, 711, 725, 735, 748, 764, 782, 803, 824, 843, 860, 877, 896, 915, 931, 947, 966, 985, 1000, 1015, 1026, 1037, 1053, 1070, 1087, 1106, 1135, 1164, 1185, 1197, 1213, 1230, 1249, 1265, 1284, 1310, 1338, 1366, 1385, 1405, 1426, 1447, 1462, 1471, 1486, 1491, 1499, 1516, 1530, 1540, 1550, 1560, 1570, 1581, 1591, 1598, 1608, 1616, 1621, 1634, 1643, 1656, 1664, 1671, 1685, 1700, 1719, 1739, 1759, 1778, 1794, 1816, 1833, 1852, 1878, 1895, 1914, 1928, 1945, 1958, 1977, 1989, 2000, 2015, 2028, 2043, 2057, 2074, 2087, 2103, 2120, 2140, 2155, 2175, 2195, 2215, 2231, 2246, 2267, 2282, 2298, 2316, 2333, 2349, 2366, 2385, 2400, 2414, 2431, 2445, 2457, 2474, 2485, 2497, 2510, 2524, 2541, 2549, 2554, 2565, 2575, 2592, 2613, 2634, 2652, 2668, 2686, 2703, 2721, 2731, 2750, 2765, 2769}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
