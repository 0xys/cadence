// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBoolValue-1]
	_ = x[MemoryKindAddressValue-2]
	_ = x[MemoryKindStringValue-3]
	_ = x[MemoryKindCharacterValue-4]
	_ = x[MemoryKindNumberValue-5]
	_ = x[MemoryKindArrayValueBase-6]
	_ = x[MemoryKindDictionaryValueBase-7]
	_ = x[MemoryKindCompositeValueBase-8]
	_ = x[MemoryKindSimpleCompositeValueBase-9]
	_ = x[MemoryKindOptionalValue-10]
	_ = x[MemoryKindNilValue-11]
	_ = x[MemoryKindVoidValue-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindStorageCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindAccountLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunctionValue-20]
	_ = x[MemoryKindHostFunctionValue-21]
	_ = x[MemoryKindBoundFunctionValue-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleCompositeValue-24]
	_ = x[MemoryKindPublishedValue-25]
	_ = x[MemoryKindAtreeArrayDataSlab-26]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-27]
	_ = x[MemoryKindAtreeArrayElementOverhead-28]
	_ = x[MemoryKindAtreeMapDataSlab-29]
	_ = x[MemoryKindAtreeMapMetaDataSlab-30]
	_ = x[MemoryKindAtreeMapElementOverhead-31]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-32]
	_ = x[MemoryKindAtreeEncodedSlab-33]
	_ = x[MemoryKindPrimitiveStaticType-34]
	_ = x[MemoryKindCompositeStaticType-35]
	_ = x[MemoryKindInterfaceStaticType-36]
	_ = x[MemoryKindVariableSizedStaticType-37]
	_ = x[MemoryKindConstantSizedStaticType-38]
	_ = x[MemoryKindDictionaryStaticType-39]
	_ = x[MemoryKindOptionalStaticType-40]
	_ = x[MemoryKindRestrictedStaticType-41]
	_ = x[MemoryKindReferenceStaticType-42]
	_ = x[MemoryKindCapabilityStaticType-43]
	_ = x[MemoryKindFunctionStaticType-44]
	_ = x[MemoryKindCadenceVoidValue-45]
	_ = x[MemoryKindCadenceOptionalValue-46]
	_ = x[MemoryKindCadenceBoolValue-47]
	_ = x[MemoryKindCadenceStringValue-48]
	_ = x[MemoryKindCadenceCharacterValue-49]
	_ = x[MemoryKindCadenceAddressValue-50]
	_ = x[MemoryKindCadenceIntValue-51]
	_ = x[MemoryKindCadenceNumberValue-52]
	_ = x[MemoryKindCadenceArrayValueBase-53]
	_ = x[MemoryKindCadenceArrayValueLength-54]
	_ = x[MemoryKindCadenceDictionaryValue-55]
	_ = x[MemoryKindCadenceKeyValuePair-56]
	_ = x[MemoryKindCadenceStructValueBase-57]
	_ = x[MemoryKindCadenceStructValueSize-58]
	_ = x[MemoryKindCadenceResourceValueBase-59]
	_ = x[MemoryKindCadenceResourceValueSize-60]
	_ = x[MemoryKindCadenceEventValueBase-61]
	_ = x[MemoryKindCadenceEventValueSize-62]
	_ = x[MemoryKindCadenceContractValueBase-63]
	_ = x[MemoryKindCadenceContractValueSize-64]
	_ = x[MemoryKindCadenceEnumValueBase-65]
	_ = x[MemoryKindCadenceEnumValueSize-66]
	_ = x[MemoryKindCadenceLinkValue-67]
	_ = x[MemoryKindCadencePathValue-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceStorageCapabilityValue-70]
	_ = x[MemoryKindCadenceFunctionValue-71]
	_ = x[MemoryKindCadenceSimpleType-72]
	_ = x[MemoryKindCadenceOptionalType-73]
	_ = x[MemoryKindCadenceVariableSizedArrayType-74]
	_ = x[MemoryKindCadenceConstantSizedArrayType-75]
	_ = x[MemoryKindCadenceDictionaryType-76]
	_ = x[MemoryKindCadenceField-77]
	_ = x[MemoryKindCadenceParameter-78]
	_ = x[MemoryKindCadenceStructType-79]
	_ = x[MemoryKindCadenceResourceType-80]
	_ = x[MemoryKindCadenceEventType-81]
	_ = x[MemoryKindCadenceContractType-82]
	_ = x[MemoryKindCadenceStructInterfaceType-83]
	_ = x[MemoryKindCadenceResourceInterfaceType-84]
	_ = x[MemoryKindCadenceContractInterfaceType-85]
	_ = x[MemoryKindCadenceFunctionType-86]
	_ = x[MemoryKindCadenceReferenceType-87]
	_ = x[MemoryKindCadenceRestrictedType-88]
	_ = x[MemoryKindCadenceCapabilityType-89]
	_ = x[MemoryKindCadenceEnumType-90]
	_ = x[MemoryKindRawString-91]
	_ = x[MemoryKindAddressLocation-92]
	_ = x[MemoryKindBytes-93]
	_ = x[MemoryKindVariable-94]
	_ = x[MemoryKindCompositeTypeInfo-95]
	_ = x[MemoryKindCompositeField-96]
	_ = x[MemoryKindInvocation-97]
	_ = x[MemoryKindStorageMap-98]
	_ = x[MemoryKindStorageKey-99]
	_ = x[MemoryKindTypeToken-100]
	_ = x[MemoryKindErrorToken-101]
	_ = x[MemoryKindSpaceToken-102]
	_ = x[MemoryKindProgram-103]
	_ = x[MemoryKindIdentifier-104]
	_ = x[MemoryKindArgument-105]
	_ = x[MemoryKindBlock-106]
	_ = x[MemoryKindFunctionBlock-107]
	_ = x[MemoryKindParameter-108]
	_ = x[MemoryKindParameterList-109]
	_ = x[MemoryKindTransfer-110]
	_ = x[MemoryKindMembers-111]
	_ = x[MemoryKindTypeAnnotation-112]
	_ = x[MemoryKindDictionaryEntry-113]
	_ = x[MemoryKindFunctionDeclaration-114]
	_ = x[MemoryKindCompositeDeclaration-115]
	_ = x[MemoryKindInterfaceDeclaration-116]
	_ = x[MemoryKindEnumCaseDeclaration-117]
	_ = x[MemoryKindFieldDeclaration-118]
	_ = x[MemoryKindTransactionDeclaration-119]
	_ = x[MemoryKindImportDeclaration-120]
	_ = x[MemoryKindVariableDeclaration-121]
	_ = x[MemoryKindSpecialFunctionDeclaration-122]
	_ = x[MemoryKindPragmaDeclaration-123]
	_ = x[MemoryKindAssignmentStatement-124]
	_ = x[MemoryKindBreakStatement-125]
	_ = x[MemoryKindContinueStatement-126]
	_ = x[MemoryKindEmitStatement-127]
	_ = x[MemoryKindExpressionStatement-128]
	_ = x[MemoryKindForStatement-129]
	_ = x[MemoryKindIfStatement-130]
	_ = x[MemoryKindReturnStatement-131]
	_ = x[MemoryKindSwapStatement-132]
	_ = x[MemoryKindSwitchStatement-133]
	_ = x[MemoryKindWhileStatement-134]
	_ = x[MemoryKindBooleanExpression-135]
	_ = x[MemoryKindNilExpression-136]
	_ = x[MemoryKindStringExpression-137]
	_ = x[MemoryKindIntegerExpression-138]
	_ = x[MemoryKindFixedPointExpression-139]
	_ = x[MemoryKindArrayExpression-140]
	_ = x[MemoryKindDictionaryExpression-141]
	_ = x[MemoryKindIdentifierExpression-142]
	_ = x[MemoryKindInvocationExpression-143]
	_ = x[MemoryKindMemberExpression-144]
	_ = x[MemoryKindIndexExpression-145]
	_ = x[MemoryKindConditionalExpression-146]
	_ = x[MemoryKindUnaryExpression-147]
	_ = x[MemoryKindBinaryExpression-148]
	_ = x[MemoryKindFunctionExpression-149]
	_ = x[MemoryKindCastingExpression-150]
	_ = x[MemoryKindCreateExpression-151]
	_ = x[MemoryKindDestroyExpression-152]
	_ = x[MemoryKindReferenceExpression-153]
	_ = x[MemoryKindForceExpression-154]
	_ = x[MemoryKindPathExpression-155]
	_ = x[MemoryKindConstantSizedType-156]
	_ = x[MemoryKindDictionaryType-157]
	_ = x[MemoryKindFunctionType-158]
	_ = x[MemoryKindInstantiationType-159]
	_ = x[MemoryKindNominalType-160]
	_ = x[MemoryKindOptionalType-161]
	_ = x[MemoryKindReferenceType-162]
	_ = x[MemoryKindRestrictedType-163]
	_ = x[MemoryKindVariableSizedType-164]
	_ = x[MemoryKindPosition-165]
	_ = x[MemoryKindRange-166]
	_ = x[MemoryKindElaboration-167]
	_ = x[MemoryKindActivation-168]
	_ = x[MemoryKindActivationEntries-169]
	_ = x[MemoryKindVariableSizedSemaType-170]
	_ = x[MemoryKindConstantSizedSemaType-171]
	_ = x[MemoryKindDictionarySemaType-172]
	_ = x[MemoryKindOptionalSemaType-173]
	_ = x[MemoryKindRestrictedSemaType-174]
	_ = x[MemoryKindReferenceSemaType-175]
	_ = x[MemoryKindCapabilitySemaType-176]
	_ = x[MemoryKindOrderedMap-177]
	_ = x[MemoryKindOrderedMapEntryList-178]
	_ = x[MemoryKindOrderedMapEntry-179]
	_ = x[MemoryKindLast-180]
}

const _MemoryKind_name = "UnknownBoolValueAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueNilValueVoidValueTypeValuePathValueStorageCapabilityValueLinkValueAccountLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 16, 28, 39, 53, 64, 78, 97, 115, 139, 152, 160, 169, 178, 187, 209, 218, 234, 255, 278, 302, 319, 337, 343, 363, 377, 395, 417, 442, 458, 478, 501, 528, 544, 563, 582, 601, 624, 647, 667, 685, 705, 724, 744, 762, 778, 798, 814, 832, 853, 872, 887, 905, 926, 949, 971, 990, 1012, 1034, 1058, 1082, 1103, 1124, 1148, 1172, 1192, 1212, 1228, 1244, 1260, 1289, 1309, 1326, 1345, 1374, 1403, 1424, 1436, 1452, 1469, 1488, 1504, 1523, 1549, 1577, 1605, 1624, 1644, 1665, 1686, 1701, 1710, 1725, 1730, 1738, 1755, 1769, 1779, 1789, 1799, 1808, 1818, 1828, 1835, 1845, 1853, 1858, 1871, 1880, 1893, 1901, 1908, 1922, 1937, 1956, 1976, 1996, 2015, 2031, 2053, 2070, 2089, 2115, 2132, 2151, 2165, 2182, 2195, 2214, 2226, 2237, 2252, 2265, 2280, 2294, 2311, 2324, 2340, 2357, 2377, 2392, 2412, 2432, 2452, 2468, 2483, 2504, 2519, 2535, 2553, 2570, 2586, 2603, 2622, 2637, 2651, 2668, 2682, 2694, 2711, 2722, 2734, 2747, 2761, 2778, 2786, 2791, 2802, 2812, 2829, 2850, 2871, 2889, 2905, 2923, 2940, 2958, 2968, 2987, 3002, 3006}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
