// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindStorageCapabilityValue-12]
	_ = x[MemoryKindLinkValue-13]
	_ = x[MemoryKindAccountLinkValue-14]
	_ = x[MemoryKindStorageReferenceValue-15]
	_ = x[MemoryKindEphemeralReferenceValue-16]
	_ = x[MemoryKindInterpretedFunctionValue-17]
	_ = x[MemoryKindHostFunctionValue-18]
	_ = x[MemoryKindBoundFunctionValue-19]
	_ = x[MemoryKindBigInt-20]
	_ = x[MemoryKindSimpleCompositeValue-21]
	_ = x[MemoryKindPublishedValue-22]
	_ = x[MemoryKindAtreeArrayDataSlab-23]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-24]
	_ = x[MemoryKindAtreeArrayElementOverhead-25]
	_ = x[MemoryKindAtreeMapDataSlab-26]
	_ = x[MemoryKindAtreeMapMetaDataSlab-27]
	_ = x[MemoryKindAtreeMapElementOverhead-28]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-29]
	_ = x[MemoryKindAtreeEncodedSlab-30]
	_ = x[MemoryKindPrimitiveStaticType-31]
	_ = x[MemoryKindCompositeStaticType-32]
	_ = x[MemoryKindInterfaceStaticType-33]
	_ = x[MemoryKindVariableSizedStaticType-34]
	_ = x[MemoryKindConstantSizedStaticType-35]
	_ = x[MemoryKindDictionaryStaticType-36]
	_ = x[MemoryKindOptionalStaticType-37]
	_ = x[MemoryKindRestrictedStaticType-38]
	_ = x[MemoryKindReferenceStaticType-39]
	_ = x[MemoryKindCapabilityStaticType-40]
	_ = x[MemoryKindFunctionStaticType-41]
	_ = x[MemoryKindCadenceVoidValue-42]
	_ = x[MemoryKindCadenceOptionalValue-43]
	_ = x[MemoryKindCadenceBoolValue-44]
	_ = x[MemoryKindCadenceStringValue-45]
	_ = x[MemoryKindCadenceCharacterValue-46]
	_ = x[MemoryKindCadenceAddressValue-47]
	_ = x[MemoryKindCadenceIntValue-48]
	_ = x[MemoryKindCadenceNumberValue-49]
	_ = x[MemoryKindCadenceArrayValueBase-50]
	_ = x[MemoryKindCadenceArrayValueLength-51]
	_ = x[MemoryKindCadenceDictionaryValue-52]
	_ = x[MemoryKindCadenceKeyValuePair-53]
	_ = x[MemoryKindCadenceStructValueBase-54]
	_ = x[MemoryKindCadenceStructValueSize-55]
	_ = x[MemoryKindCadenceResourceValueBase-56]
	_ = x[MemoryKindCadenceResourceValueSize-57]
	_ = x[MemoryKindCadenceEventValueBase-58]
	_ = x[MemoryKindCadenceEventValueSize-59]
	_ = x[MemoryKindCadenceContractValueBase-60]
	_ = x[MemoryKindCadenceContractValueSize-61]
	_ = x[MemoryKindCadenceEnumValueBase-62]
	_ = x[MemoryKindCadenceEnumValueSize-63]
	_ = x[MemoryKindCadenceLinkValue-64]
	_ = x[MemoryKindCadencePathValue-65]
	_ = x[MemoryKindCadenceTypeValue-66]
	_ = x[MemoryKindCadenceStorageCapabilityValue-67]
	_ = x[MemoryKindCadenceFunctionValue-68]
	_ = x[MemoryKindCadenceSimpleType-69]
	_ = x[MemoryKindCadenceOptionalType-70]
	_ = x[MemoryKindCadenceVariableSizedArrayType-71]
	_ = x[MemoryKindCadenceConstantSizedArrayType-72]
	_ = x[MemoryKindCadenceDictionaryType-73]
	_ = x[MemoryKindCadenceField-74]
	_ = x[MemoryKindCadenceParameter-75]
	_ = x[MemoryKindCadenceStructType-76]
	_ = x[MemoryKindCadenceResourceType-77]
	_ = x[MemoryKindCadenceEventType-78]
	_ = x[MemoryKindCadenceContractType-79]
	_ = x[MemoryKindCadenceStructInterfaceType-80]
	_ = x[MemoryKindCadenceResourceInterfaceType-81]
	_ = x[MemoryKindCadenceContractInterfaceType-82]
	_ = x[MemoryKindCadenceFunctionType-83]
	_ = x[MemoryKindCadenceReferenceType-84]
	_ = x[MemoryKindCadenceRestrictedType-85]
	_ = x[MemoryKindCadenceCapabilityType-86]
	_ = x[MemoryKindCadenceEnumType-87]
	_ = x[MemoryKindRawString-88]
	_ = x[MemoryKindAddressLocation-89]
	_ = x[MemoryKindBytes-90]
	_ = x[MemoryKindVariable-91]
	_ = x[MemoryKindCompositeTypeInfo-92]
	_ = x[MemoryKindCompositeField-93]
	_ = x[MemoryKindInvocation-94]
	_ = x[MemoryKindStorageMap-95]
	_ = x[MemoryKindStorageKey-96]
	_ = x[MemoryKindTypeToken-97]
	_ = x[MemoryKindErrorToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTransfer-107]
	_ = x[MemoryKindMembers-108]
	_ = x[MemoryKindTypeAnnotation-109]
	_ = x[MemoryKindDictionaryEntry-110]
	_ = x[MemoryKindFunctionDeclaration-111]
	_ = x[MemoryKindCompositeDeclaration-112]
	_ = x[MemoryKindInterfaceDeclaration-113]
	_ = x[MemoryKindEnumCaseDeclaration-114]
	_ = x[MemoryKindFieldDeclaration-115]
	_ = x[MemoryKindTransactionDeclaration-116]
	_ = x[MemoryKindImportDeclaration-117]
	_ = x[MemoryKindVariableDeclaration-118]
	_ = x[MemoryKindSpecialFunctionDeclaration-119]
	_ = x[MemoryKindPragmaDeclaration-120]
	_ = x[MemoryKindAssignmentStatement-121]
	_ = x[MemoryKindBreakStatement-122]
	_ = x[MemoryKindContinueStatement-123]
	_ = x[MemoryKindEmitStatement-124]
	_ = x[MemoryKindExpressionStatement-125]
	_ = x[MemoryKindForStatement-126]
	_ = x[MemoryKindIfStatement-127]
	_ = x[MemoryKindReturnStatement-128]
	_ = x[MemoryKindSwapStatement-129]
	_ = x[MemoryKindSwitchStatement-130]
	_ = x[MemoryKindWhileStatement-131]
	_ = x[MemoryKindBooleanExpression-132]
	_ = x[MemoryKindVoidExpression-133]
	_ = x[MemoryKindNilExpression-134]
	_ = x[MemoryKindStringExpression-135]
	_ = x[MemoryKindIntegerExpression-136]
	_ = x[MemoryKindFixedPointExpression-137]
	_ = x[MemoryKindArrayExpression-138]
	_ = x[MemoryKindDictionaryExpression-139]
	_ = x[MemoryKindIdentifierExpression-140]
	_ = x[MemoryKindInvocationExpression-141]
	_ = x[MemoryKindMemberExpression-142]
	_ = x[MemoryKindIndexExpression-143]
	_ = x[MemoryKindConditionalExpression-144]
	_ = x[MemoryKindUnaryExpression-145]
	_ = x[MemoryKindBinaryExpression-146]
	_ = x[MemoryKindFunctionExpression-147]
	_ = x[MemoryKindCastingExpression-148]
	_ = x[MemoryKindCreateExpression-149]
	_ = x[MemoryKindDestroyExpression-150]
	_ = x[MemoryKindReferenceExpression-151]
	_ = x[MemoryKindForceExpression-152]
	_ = x[MemoryKindPathExpression-153]
	_ = x[MemoryKindConstantSizedType-154]
	_ = x[MemoryKindDictionaryType-155]
	_ = x[MemoryKindFunctionType-156]
	_ = x[MemoryKindInstantiationType-157]
	_ = x[MemoryKindNominalType-158]
	_ = x[MemoryKindOptionalType-159]
	_ = x[MemoryKindReferenceType-160]
	_ = x[MemoryKindRestrictedType-161]
	_ = x[MemoryKindVariableSizedType-162]
	_ = x[MemoryKindPosition-163]
	_ = x[MemoryKindRange-164]
	_ = x[MemoryKindElaboration-165]
	_ = x[MemoryKindActivation-166]
	_ = x[MemoryKindActivationEntries-167]
	_ = x[MemoryKindVariableSizedSemaType-168]
	_ = x[MemoryKindConstantSizedSemaType-169]
	_ = x[MemoryKindDictionarySemaType-170]
	_ = x[MemoryKindOptionalSemaType-171]
	_ = x[MemoryKindRestrictedSemaType-172]
	_ = x[MemoryKindReferenceSemaType-173]
	_ = x[MemoryKindCapabilitySemaType-174]
	_ = x[MemoryKindOrderedMap-175]
	_ = x[MemoryKindOrderedMapEntryList-176]
	_ = x[MemoryKindOrderedMapEntry-177]
	_ = x[MemoryKindLast-178]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueStorageCapabilityValueLinkValueAccountLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 183, 192, 208, 229, 252, 276, 293, 311, 317, 337, 351, 369, 391, 416, 432, 452, 475, 502, 518, 537, 556, 575, 598, 621, 641, 659, 679, 698, 718, 736, 752, 772, 788, 806, 827, 846, 861, 879, 900, 923, 945, 964, 986, 1008, 1032, 1056, 1077, 1098, 1122, 1146, 1166, 1186, 1202, 1218, 1234, 1263, 1283, 1300, 1319, 1348, 1377, 1398, 1410, 1426, 1443, 1462, 1478, 1497, 1523, 1551, 1579, 1598, 1618, 1639, 1660, 1675, 1684, 1699, 1704, 1712, 1729, 1743, 1753, 1763, 1773, 1782, 1792, 1802, 1809, 1819, 1827, 1832, 1845, 1854, 1867, 1875, 1882, 1896, 1911, 1930, 1950, 1970, 1989, 2005, 2027, 2044, 2063, 2089, 2106, 2125, 2139, 2156, 2169, 2188, 2200, 2211, 2226, 2239, 2254, 2268, 2285, 2299, 2312, 2328, 2345, 2365, 2380, 2400, 2420, 2440, 2456, 2471, 2492, 2507, 2523, 2541, 2558, 2574, 2591, 2610, 2625, 2639, 2656, 2670, 2682, 2699, 2710, 2722, 2735, 2749, 2766, 2774, 2779, 2790, 2800, 2817, 2838, 2859, 2877, 2893, 2911, 2928, 2946, 2956, 2975, 2990, 2994}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
