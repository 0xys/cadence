// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindAtreeEncodedSlab-32]
	_ = x[MemoryKindPrimitiveStaticType-33]
	_ = x[MemoryKindCompositeStaticType-34]
	_ = x[MemoryKindInterfaceStaticType-35]
	_ = x[MemoryKindVariableSizedStaticType-36]
	_ = x[MemoryKindConstantSizedStaticType-37]
	_ = x[MemoryKindDictionaryStaticType-38]
	_ = x[MemoryKindOptionalStaticType-39]
	_ = x[MemoryKindRestrictedStaticType-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCadenceVoid-44]
	_ = x[MemoryKindCadenceOptional-45]
	_ = x[MemoryKindCadenceBool-46]
	_ = x[MemoryKindCadenceString-47]
	_ = x[MemoryKindCadenceCharacter-48]
	_ = x[MemoryKindCadenceAddress-49]
	_ = x[MemoryKindCadenceInt-50]
	_ = x[MemoryKindCadenceNumber-51]
	_ = x[MemoryKindCadenceArrayBase-52]
	_ = x[MemoryKindCadenceArrayLength-53]
	_ = x[MemoryKindCadenceDictionaryBase-54]
	_ = x[MemoryKindCadenceDictionarySize-55]
	_ = x[MemoryKindCadenceKeyValuePair-56]
	_ = x[MemoryKindCadenceStructBase-57]
	_ = x[MemoryKindCadenceStructSize-58]
	_ = x[MemoryKindCadenceResourceBase-59]
	_ = x[MemoryKindCadenceResourceSize-60]
	_ = x[MemoryKindCadenceEventBase-61]
	_ = x[MemoryKindCadenceEventSize-62]
	_ = x[MemoryKindCadenceContractBase-63]
	_ = x[MemoryKindCadenceContractSize-64]
	_ = x[MemoryKindCadenceEnumBase-65]
	_ = x[MemoryKindCadenceEnumSize-66]
	_ = x[MemoryKindCadenceLink-67]
	_ = x[MemoryKindCadencePath-68]
	_ = x[MemoryKindCadenceTypeValue-69]
	_ = x[MemoryKindCadenceCapability-70]
	_ = x[MemoryKindCadenceSimpleType-71]
	_ = x[MemoryKindCadenceOptionalType-72]
	_ = x[MemoryKindCadenceVariableSizedArrayType-73]
	_ = x[MemoryKindCadenceConstantSizedArrayType-74]
	_ = x[MemoryKindCadenceDictionaryType-75]
	_ = x[MemoryKindCadenceField-76]
	_ = x[MemoryKindCadenceParameter-77]
	_ = x[MemoryKindCadenceStructType-78]
	_ = x[MemoryKindCadenceResourceType-79]
	_ = x[MemoryKindCadenceEventType-80]
	_ = x[MemoryKindCadenceContractType-81]
	_ = x[MemoryKindCadenceStructInterfaceType-82]
	_ = x[MemoryKindCadenceResourceInterfaceType-83]
	_ = x[MemoryKindCadenceContractInterfaceType-84]
	_ = x[MemoryKindCadenceFunctionType-85]
	_ = x[MemoryKindCadenceReferenceType-86]
	_ = x[MemoryKindCadenceRestrictedType-87]
	_ = x[MemoryKindCadenceCapabilityType-88]
	_ = x[MemoryKindCadenceEnumType-89]
	_ = x[MemoryKindRawString-90]
	_ = x[MemoryKindAddressLocation-91]
	_ = x[MemoryKindBytes-92]
	_ = x[MemoryKindVariable-93]
	_ = x[MemoryKindCompositeTypeInfo-94]
	_ = x[MemoryKindCompositeField-95]
	_ = x[MemoryKindInvocation-96]
	_ = x[MemoryKindStorageMap-97]
	_ = x[MemoryKindStorageKey-98]
	_ = x[MemoryKindValueToken-99]
	_ = x[MemoryKindSyntaxToken-100]
	_ = x[MemoryKindSpaceToken-101]
	_ = x[MemoryKindProgram-102]
	_ = x[MemoryKindIdentifier-103]
	_ = x[MemoryKindArgument-104]
	_ = x[MemoryKindBlock-105]
	_ = x[MemoryKindFunctionBlock-106]
	_ = x[MemoryKindParameter-107]
	_ = x[MemoryKindParameterList-108]
	_ = x[MemoryKindTransfer-109]
	_ = x[MemoryKindMembers-110]
	_ = x[MemoryKindTypeAnnotation-111]
	_ = x[MemoryKindDictionaryEntry-112]
	_ = x[MemoryKindFunctionDeclaration-113]
	_ = x[MemoryKindCompositeDeclaration-114]
	_ = x[MemoryKindInterfaceDeclaration-115]
	_ = x[MemoryKindEnumCaseDeclaration-116]
	_ = x[MemoryKindFieldDeclaration-117]
	_ = x[MemoryKindTransactionDeclaration-118]
	_ = x[MemoryKindImportDeclaration-119]
	_ = x[MemoryKindVariableDeclaration-120]
	_ = x[MemoryKindSpecialFunctionDeclaration-121]
	_ = x[MemoryKindPragmaDeclaration-122]
	_ = x[MemoryKindAssignmentStatement-123]
	_ = x[MemoryKindBreakStatement-124]
	_ = x[MemoryKindContinueStatement-125]
	_ = x[MemoryKindEmitStatement-126]
	_ = x[MemoryKindExpressionStatement-127]
	_ = x[MemoryKindForStatement-128]
	_ = x[MemoryKindIfStatement-129]
	_ = x[MemoryKindReturnStatement-130]
	_ = x[MemoryKindSwapStatement-131]
	_ = x[MemoryKindSwitchStatement-132]
	_ = x[MemoryKindWhileStatement-133]
	_ = x[MemoryKindBooleanExpression-134]
	_ = x[MemoryKindNilExpression-135]
	_ = x[MemoryKindStringExpression-136]
	_ = x[MemoryKindIntegerExpression-137]
	_ = x[MemoryKindFixedPointExpression-138]
	_ = x[MemoryKindArrayExpression-139]
	_ = x[MemoryKindDictionaryExpression-140]
	_ = x[MemoryKindIdentifierExpression-141]
	_ = x[MemoryKindInvocationExpression-142]
	_ = x[MemoryKindMemberExpression-143]
	_ = x[MemoryKindIndexExpression-144]
	_ = x[MemoryKindConditionalExpression-145]
	_ = x[MemoryKindUnaryExpression-146]
	_ = x[MemoryKindBinaryExpression-147]
	_ = x[MemoryKindFunctionExpression-148]
	_ = x[MemoryKindCastingExpression-149]
	_ = x[MemoryKindCreateExpression-150]
	_ = x[MemoryKindDestroyExpression-151]
	_ = x[MemoryKindReferenceExpression-152]
	_ = x[MemoryKindForceExpression-153]
	_ = x[MemoryKindPathExpression-154]
	_ = x[MemoryKindConstantSizedType-155]
	_ = x[MemoryKindDictionaryType-156]
	_ = x[MemoryKindFunctionType-157]
	_ = x[MemoryKindInstantiationType-158]
	_ = x[MemoryKindNominalType-159]
	_ = x[MemoryKindOptionalType-160]
	_ = x[MemoryKindReferenceType-161]
	_ = x[MemoryKindRestrictedType-162]
	_ = x[MemoryKindVariableSizedType-163]
	_ = x[MemoryKindPosition-164]
	_ = x[MemoryKindRange-165]
	_ = x[MemoryKindElaboration-166]
	_ = x[MemoryKindActivation-167]
	_ = x[MemoryKindActivationEntries-168]
	_ = x[MemoryKindVariableSizedSemaType-169]
	_ = x[MemoryKindConstantSizedSemaType-170]
	_ = x[MemoryKindDictionarySemaType-171]
	_ = x[MemoryKindOptionalSemaType-172]
	_ = x[MemoryKindRestrictedSemaType-173]
	_ = x[MemoryKindReferenceSemaType-174]
	_ = x[MemoryKindCapabilitySemaType-175]
	_ = x[MemoryKindOrderedMap-176]
	_ = x[MemoryKindOrderedMapEntryList-177]
	_ = x[MemoryKindOrderedMapEntry-178]
	_ = x[MemoryKindLast-179]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 333, 349, 369, 392, 419, 435, 454, 473, 492, 515, 538, 558, 576, 596, 615, 635, 653, 664, 679, 690, 703, 719, 733, 743, 756, 772, 790, 811, 832, 851, 868, 885, 904, 923, 939, 955, 974, 993, 1008, 1023, 1034, 1045, 1061, 1078, 1095, 1114, 1143, 1172, 1193, 1205, 1221, 1238, 1257, 1273, 1292, 1318, 1346, 1374, 1393, 1413, 1434, 1455, 1470, 1479, 1494, 1499, 1507, 1524, 1538, 1548, 1558, 1568, 1578, 1589, 1599, 1606, 1616, 1624, 1629, 1642, 1651, 1664, 1672, 1679, 1693, 1708, 1727, 1747, 1767, 1786, 1802, 1824, 1841, 1860, 1886, 1903, 1922, 1936, 1953, 1966, 1985, 1997, 2008, 2023, 2036, 2051, 2065, 2082, 2095, 2111, 2128, 2148, 2163, 2183, 2203, 2223, 2239, 2254, 2275, 2290, 2306, 2324, 2341, 2357, 2374, 2393, 2408, 2422, 2439, 2453, 2465, 2482, 2493, 2505, 2518, 2532, 2549, 2557, 2562, 2573, 2583, 2600, 2621, 2642, 2660, 2676, 2694, 2711, 2729, 2739, 2758, 2773, 2777}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
