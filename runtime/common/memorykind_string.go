// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBoolValue-1]
	_ = x[MemoryKindAddressValue-2]
	_ = x[MemoryKindStringValue-3]
	_ = x[MemoryKindCharacterValue-4]
	_ = x[MemoryKindNumberValue-5]
	_ = x[MemoryKindArrayValueBase-6]
	_ = x[MemoryKindDictionaryValueBase-7]
	_ = x[MemoryKindCompositeValueBase-8]
	_ = x[MemoryKindSimpleCompositeValueBase-9]
	_ = x[MemoryKindOptionalValue-10]
	_ = x[MemoryKindNilValue-11]
	_ = x[MemoryKindVoidValue-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindStorageCapabilityValue-15]
	_ = x[MemoryKindAccountCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindAccountLinkValue-18]
	_ = x[MemoryKindStorageReferenceValue-19]
	_ = x[MemoryKindEphemeralReferenceValue-20]
	_ = x[MemoryKindInterpretedFunctionValue-21]
	_ = x[MemoryKindHostFunctionValue-22]
	_ = x[MemoryKindBoundFunctionValue-23]
	_ = x[MemoryKindBigInt-24]
	_ = x[MemoryKindSimpleCompositeValue-25]
	_ = x[MemoryKindPublishedValue-26]
	_ = x[MemoryKindAtreeArrayDataSlab-27]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-28]
	_ = x[MemoryKindAtreeArrayElementOverhead-29]
	_ = x[MemoryKindAtreeMapDataSlab-30]
	_ = x[MemoryKindAtreeMapMetaDataSlab-31]
	_ = x[MemoryKindAtreeMapElementOverhead-32]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-33]
	_ = x[MemoryKindAtreeEncodedSlab-34]
	_ = x[MemoryKindPrimitiveStaticType-35]
	_ = x[MemoryKindCompositeStaticType-36]
	_ = x[MemoryKindInterfaceStaticType-37]
	_ = x[MemoryKindVariableSizedStaticType-38]
	_ = x[MemoryKindConstantSizedStaticType-39]
	_ = x[MemoryKindDictionaryStaticType-40]
	_ = x[MemoryKindOptionalStaticType-41]
	_ = x[MemoryKindRestrictedStaticType-42]
	_ = x[MemoryKindReferenceStaticType-43]
	_ = x[MemoryKindCapabilityStaticType-44]
	_ = x[MemoryKindFunctionStaticType-45]
	_ = x[MemoryKindCadenceVoidValue-46]
	_ = x[MemoryKindCadenceOptionalValue-47]
	_ = x[MemoryKindCadenceBoolValue-48]
	_ = x[MemoryKindCadenceStringValue-49]
	_ = x[MemoryKindCadenceCharacterValue-50]
	_ = x[MemoryKindCadenceAddressValue-51]
	_ = x[MemoryKindCadenceIntValue-52]
	_ = x[MemoryKindCadenceNumberValue-53]
	_ = x[MemoryKindCadenceArrayValueBase-54]
	_ = x[MemoryKindCadenceArrayValueLength-55]
	_ = x[MemoryKindCadenceDictionaryValue-56]
	_ = x[MemoryKindCadenceKeyValuePair-57]
	_ = x[MemoryKindCadenceStructValueBase-58]
	_ = x[MemoryKindCadenceStructValueSize-59]
	_ = x[MemoryKindCadenceResourceValueBase-60]
	_ = x[MemoryKindCadenceResourceValueSize-61]
	_ = x[MemoryKindCadenceEventValueBase-62]
	_ = x[MemoryKindCadenceEventValueSize-63]
	_ = x[MemoryKindCadenceContractValueBase-64]
	_ = x[MemoryKindCadenceContractValueSize-65]
	_ = x[MemoryKindCadenceEnumValueBase-66]
	_ = x[MemoryKindCadenceEnumValueSize-67]
	_ = x[MemoryKindCadenceLinkValue-68]
	_ = x[MemoryKindCadencePathValue-69]
	_ = x[MemoryKindCadenceTypeValue-70]
	_ = x[MemoryKindCadenceStorageCapabilityValue-71]
	_ = x[MemoryKindCadenceFunctionValue-72]
	_ = x[MemoryKindCadenceSimpleType-73]
	_ = x[MemoryKindCadenceOptionalType-74]
	_ = x[MemoryKindCadenceVariableSizedArrayType-75]
	_ = x[MemoryKindCadenceConstantSizedArrayType-76]
	_ = x[MemoryKindCadenceDictionaryType-77]
	_ = x[MemoryKindCadenceField-78]
	_ = x[MemoryKindCadenceParameter-79]
	_ = x[MemoryKindCadenceStructType-80]
	_ = x[MemoryKindCadenceResourceType-81]
	_ = x[MemoryKindCadenceEventType-82]
	_ = x[MemoryKindCadenceContractType-83]
	_ = x[MemoryKindCadenceStructInterfaceType-84]
	_ = x[MemoryKindCadenceResourceInterfaceType-85]
	_ = x[MemoryKindCadenceContractInterfaceType-86]
	_ = x[MemoryKindCadenceFunctionType-87]
	_ = x[MemoryKindCadenceReferenceType-88]
	_ = x[MemoryKindCadenceRestrictedType-89]
	_ = x[MemoryKindCadenceCapabilityType-90]
	_ = x[MemoryKindCadenceEnumType-91]
	_ = x[MemoryKindRawString-92]
	_ = x[MemoryKindAddressLocation-93]
	_ = x[MemoryKindBytes-94]
	_ = x[MemoryKindVariable-95]
	_ = x[MemoryKindCompositeTypeInfo-96]
	_ = x[MemoryKindCompositeField-97]
	_ = x[MemoryKindInvocation-98]
	_ = x[MemoryKindStorageMap-99]
	_ = x[MemoryKindStorageKey-100]
	_ = x[MemoryKindTypeToken-101]
	_ = x[MemoryKindErrorToken-102]
	_ = x[MemoryKindSpaceToken-103]
	_ = x[MemoryKindProgram-104]
	_ = x[MemoryKindIdentifier-105]
	_ = x[MemoryKindArgument-106]
	_ = x[MemoryKindBlock-107]
	_ = x[MemoryKindFunctionBlock-108]
	_ = x[MemoryKindParameter-109]
	_ = x[MemoryKindParameterList-110]
	_ = x[MemoryKindTransfer-111]
	_ = x[MemoryKindMembers-112]
	_ = x[MemoryKindTypeAnnotation-113]
	_ = x[MemoryKindDictionaryEntry-114]
	_ = x[MemoryKindFunctionDeclaration-115]
	_ = x[MemoryKindCompositeDeclaration-116]
	_ = x[MemoryKindInterfaceDeclaration-117]
	_ = x[MemoryKindEnumCaseDeclaration-118]
	_ = x[MemoryKindFieldDeclaration-119]
	_ = x[MemoryKindTransactionDeclaration-120]
	_ = x[MemoryKindImportDeclaration-121]
	_ = x[MemoryKindVariableDeclaration-122]
	_ = x[MemoryKindSpecialFunctionDeclaration-123]
	_ = x[MemoryKindPragmaDeclaration-124]
	_ = x[MemoryKindAssignmentStatement-125]
	_ = x[MemoryKindBreakStatement-126]
	_ = x[MemoryKindContinueStatement-127]
	_ = x[MemoryKindEmitStatement-128]
	_ = x[MemoryKindExpressionStatement-129]
	_ = x[MemoryKindForStatement-130]
	_ = x[MemoryKindIfStatement-131]
	_ = x[MemoryKindReturnStatement-132]
	_ = x[MemoryKindSwapStatement-133]
	_ = x[MemoryKindSwitchStatement-134]
	_ = x[MemoryKindWhileStatement-135]
	_ = x[MemoryKindBooleanExpression-136]
	_ = x[MemoryKindNilExpression-137]
	_ = x[MemoryKindStringExpression-138]
	_ = x[MemoryKindIntegerExpression-139]
	_ = x[MemoryKindFixedPointExpression-140]
	_ = x[MemoryKindArrayExpression-141]
	_ = x[MemoryKindDictionaryExpression-142]
	_ = x[MemoryKindIdentifierExpression-143]
	_ = x[MemoryKindInvocationExpression-144]
	_ = x[MemoryKindMemberExpression-145]
	_ = x[MemoryKindIndexExpression-146]
	_ = x[MemoryKindConditionalExpression-147]
	_ = x[MemoryKindUnaryExpression-148]
	_ = x[MemoryKindBinaryExpression-149]
	_ = x[MemoryKindFunctionExpression-150]
	_ = x[MemoryKindCastingExpression-151]
	_ = x[MemoryKindCreateExpression-152]
	_ = x[MemoryKindDestroyExpression-153]
	_ = x[MemoryKindReferenceExpression-154]
	_ = x[MemoryKindForceExpression-155]
	_ = x[MemoryKindPathExpression-156]
	_ = x[MemoryKindConstantSizedType-157]
	_ = x[MemoryKindDictionaryType-158]
	_ = x[MemoryKindFunctionType-159]
	_ = x[MemoryKindInstantiationType-160]
	_ = x[MemoryKindNominalType-161]
	_ = x[MemoryKindOptionalType-162]
	_ = x[MemoryKindReferenceType-163]
	_ = x[MemoryKindRestrictedType-164]
	_ = x[MemoryKindVariableSizedType-165]
	_ = x[MemoryKindPosition-166]
	_ = x[MemoryKindRange-167]
	_ = x[MemoryKindElaboration-168]
	_ = x[MemoryKindActivation-169]
	_ = x[MemoryKindActivationEntries-170]
	_ = x[MemoryKindVariableSizedSemaType-171]
	_ = x[MemoryKindConstantSizedSemaType-172]
	_ = x[MemoryKindDictionarySemaType-173]
	_ = x[MemoryKindOptionalSemaType-174]
	_ = x[MemoryKindRestrictedSemaType-175]
	_ = x[MemoryKindReferenceSemaType-176]
	_ = x[MemoryKindCapabilitySemaType-177]
	_ = x[MemoryKindOrderedMap-178]
	_ = x[MemoryKindOrderedMapEntryList-179]
	_ = x[MemoryKindOrderedMapEntry-180]
	_ = x[MemoryKindLast-181]
}

const _MemoryKind_name = "UnknownBoolValueAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueNilValueVoidValueTypeValuePathValueStorageCapabilityValueAccountCapabilityValueLinkValueAccountLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceStorageCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 16, 28, 39, 53, 64, 78, 97, 115, 139, 152, 160, 169, 178, 187, 209, 231, 240, 256, 277, 300, 324, 341, 359, 365, 385, 399, 417, 439, 464, 480, 500, 523, 550, 566, 585, 604, 623, 646, 669, 689, 707, 727, 746, 766, 784, 800, 820, 836, 854, 875, 894, 909, 927, 948, 971, 993, 1012, 1034, 1056, 1080, 1104, 1125, 1146, 1170, 1194, 1214, 1234, 1250, 1266, 1282, 1311, 1331, 1348, 1367, 1396, 1425, 1446, 1458, 1474, 1491, 1510, 1526, 1545, 1571, 1599, 1627, 1646, 1666, 1687, 1708, 1723, 1732, 1747, 1752, 1760, 1777, 1791, 1801, 1811, 1821, 1830, 1840, 1850, 1857, 1867, 1875, 1880, 1893, 1902, 1915, 1923, 1930, 1944, 1959, 1978, 1998, 2018, 2037, 2053, 2075, 2092, 2111, 2137, 2154, 2173, 2187, 2204, 2217, 2236, 2248, 2259, 2274, 2287, 2302, 2316, 2333, 2346, 2362, 2379, 2399, 2414, 2434, 2454, 2474, 2490, 2505, 2526, 2541, 2557, 2575, 2592, 2608, 2625, 2644, 2659, 2673, 2690, 2704, 2716, 2733, 2744, 2756, 2769, 2783, 2800, 2808, 2813, 2824, 2834, 2851, 2872, 2893, 2911, 2927, 2945, 2962, 2980, 2990, 3009, 3024, 3028}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
