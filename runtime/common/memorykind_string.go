// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindNumber-5]
	_ = x[MemoryKindArrayBase-6]
	_ = x[MemoryKindDictionaryBase-7]
	_ = x[MemoryKindCompositeBase-8]
	_ = x[MemoryKindSimpleCompositeBase-9]
	_ = x[MemoryKindOptional-10]
	_ = x[MemoryKindNil-11]
	_ = x[MemoryKindVoid-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunction-19]
	_ = x[MemoryKindHostFunction-20]
	_ = x[MemoryKindBoundFunction-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleComposite-23]
	_ = x[MemoryKindAtreeArrayDataSlab-24]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-25]
	_ = x[MemoryKindAtreeArrayElementOverhead-26]
	_ = x[MemoryKindAtreeMapDataSlab-27]
	_ = x[MemoryKindAtreeMapMetaDataSlab-28]
	_ = x[MemoryKindAtreeMapElementOverhead-29]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-30]
	_ = x[MemoryKindAtreeEncodedSlab-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoid-43]
	_ = x[MemoryKindCadenceOptional-44]
	_ = x[MemoryKindCadenceBool-45]
	_ = x[MemoryKindCadenceString-46]
	_ = x[MemoryKindCadenceCharacter-47]
	_ = x[MemoryKindCadenceAddress-48]
	_ = x[MemoryKindCadenceInt-49]
	_ = x[MemoryKindCadenceNumber-50]
	_ = x[MemoryKindCadenceArrayBase-51]
	_ = x[MemoryKindCadenceArrayLength-52]
	_ = x[MemoryKindCadenceDictionary-53]
	_ = x[MemoryKindCadenceKeyValuePair-54]
	_ = x[MemoryKindCadenceStructBase-55]
	_ = x[MemoryKindCadenceStructSize-56]
	_ = x[MemoryKindCadenceResourceBase-57]
	_ = x[MemoryKindCadenceResourceSize-58]
	_ = x[MemoryKindCadenceEventBase-59]
	_ = x[MemoryKindCadenceEventSize-60]
	_ = x[MemoryKindCadenceContractBase-61]
	_ = x[MemoryKindCadenceContractSize-62]
	_ = x[MemoryKindCadenceEnumBase-63]
	_ = x[MemoryKindCadenceEnumSize-64]
	_ = x[MemoryKindCadenceLink-65]
	_ = x[MemoryKindCadencePath-66]
	_ = x[MemoryKindCadenceTypeValue-67]
	_ = x[MemoryKindCadenceCapability-68]
	_ = x[MemoryKindCadenceSimpleType-69]
	_ = x[MemoryKindCadenceOptionalType-70]
	_ = x[MemoryKindCadenceVariableSizedArrayType-71]
	_ = x[MemoryKindCadenceConstantSizedArrayType-72]
	_ = x[MemoryKindCadenceDictionaryType-73]
	_ = x[MemoryKindCadenceField-74]
	_ = x[MemoryKindCadenceParameter-75]
	_ = x[MemoryKindCadenceStructType-76]
	_ = x[MemoryKindCadenceResourceType-77]
	_ = x[MemoryKindCadenceEventType-78]
	_ = x[MemoryKindCadenceContractType-79]
	_ = x[MemoryKindCadenceStructInterfaceType-80]
	_ = x[MemoryKindCadenceResourceInterfaceType-81]
	_ = x[MemoryKindCadenceContractInterfaceType-82]
	_ = x[MemoryKindCadenceFunctionType-83]
	_ = x[MemoryKindCadenceReferenceType-84]
	_ = x[MemoryKindCadenceRestrictedType-85]
	_ = x[MemoryKindCadenceCapabilityType-86]
	_ = x[MemoryKindCadenceEnumType-87]
	_ = x[MemoryKindRawString-88]
	_ = x[MemoryKindAddressLocation-89]
	_ = x[MemoryKindBytes-90]
	_ = x[MemoryKindVariable-91]
	_ = x[MemoryKindCompositeTypeInfo-92]
	_ = x[MemoryKindCompositeField-93]
	_ = x[MemoryKindInvocation-94]
	_ = x[MemoryKindStorageMap-95]
	_ = x[MemoryKindStorageKey-96]
	_ = x[MemoryKindValueToken-97]
	_ = x[MemoryKindSyntaxToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTransfer-107]
	_ = x[MemoryKindMembers-108]
	_ = x[MemoryKindTypeAnnotation-109]
	_ = x[MemoryKindDictionaryEntry-110]
	_ = x[MemoryKindFunctionDeclaration-111]
	_ = x[MemoryKindCompositeDeclaration-112]
	_ = x[MemoryKindInterfaceDeclaration-113]
	_ = x[MemoryKindEnumCaseDeclaration-114]
	_ = x[MemoryKindFieldDeclaration-115]
	_ = x[MemoryKindTransactionDeclaration-116]
	_ = x[MemoryKindImportDeclaration-117]
	_ = x[MemoryKindVariableDeclaration-118]
	_ = x[MemoryKindSpecialFunctionDeclaration-119]
	_ = x[MemoryKindPragmaDeclaration-120]
	_ = x[MemoryKindAssignmentStatement-121]
	_ = x[MemoryKindBreakStatement-122]
	_ = x[MemoryKindContinueStatement-123]
	_ = x[MemoryKindEmitStatement-124]
	_ = x[MemoryKindExpressionStatement-125]
	_ = x[MemoryKindForStatement-126]
	_ = x[MemoryKindIfStatement-127]
	_ = x[MemoryKindReturnStatement-128]
	_ = x[MemoryKindSwapStatement-129]
	_ = x[MemoryKindSwitchStatement-130]
	_ = x[MemoryKindWhileStatement-131]
	_ = x[MemoryKindBooleanExpression-132]
	_ = x[MemoryKindNilExpression-133]
	_ = x[MemoryKindStringExpression-134]
	_ = x[MemoryKindIntegerExpression-135]
	_ = x[MemoryKindFixedPointExpression-136]
	_ = x[MemoryKindArrayExpression-137]
	_ = x[MemoryKindDictionaryExpression-138]
	_ = x[MemoryKindIdentifierExpression-139]
	_ = x[MemoryKindInvocationExpression-140]
	_ = x[MemoryKindMemberExpression-141]
	_ = x[MemoryKindIndexExpression-142]
	_ = x[MemoryKindConditionalExpression-143]
	_ = x[MemoryKindUnaryExpression-144]
	_ = x[MemoryKindBinaryExpression-145]
	_ = x[MemoryKindFunctionExpression-146]
	_ = x[MemoryKindCastingExpression-147]
	_ = x[MemoryKindCreateExpression-148]
	_ = x[MemoryKindDestroyExpression-149]
	_ = x[MemoryKindReferenceExpression-150]
	_ = x[MemoryKindForceExpression-151]
	_ = x[MemoryKindPathExpression-152]
	_ = x[MemoryKindConstantSizedType-153]
	_ = x[MemoryKindDictionaryType-154]
	_ = x[MemoryKindFunctionType-155]
	_ = x[MemoryKindInstantiationType-156]
	_ = x[MemoryKindNominalType-157]
	_ = x[MemoryKindOptionalType-158]
	_ = x[MemoryKindReferenceType-159]
	_ = x[MemoryKindRestrictedType-160]
	_ = x[MemoryKindVariableSizedType-161]
	_ = x[MemoryKindPosition-162]
	_ = x[MemoryKindRange-163]
	_ = x[MemoryKindElaboration-164]
	_ = x[MemoryKindActivation-165]
	_ = x[MemoryKindActivationEntries-166]
	_ = x[MemoryKindVariableSizedSemaType-167]
	_ = x[MemoryKindConstantSizedSemaType-168]
	_ = x[MemoryKindDictionarySemaType-169]
	_ = x[MemoryKindOptionalSemaType-170]
	_ = x[MemoryKindRestrictedSemaType-171]
	_ = x[MemoryKindReferenceSemaType-172]
	_ = x[MemoryKindCapabilitySemaType-173]
	_ = x[MemoryKindOrderedMap-174]
	_ = x[MemoryKindOrderedMapEntryList-175]
	_ = x[MemoryKindOrderedMapEntry-176]
	_ = x[MemoryKindLast-177]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 39, 48, 62, 75, 94, 102, 105, 109, 118, 127, 142, 151, 172, 195, 214, 226, 239, 245, 260, 278, 300, 325, 341, 361, 384, 411, 427, 446, 465, 484, 507, 530, 550, 568, 588, 607, 627, 645, 656, 671, 682, 695, 711, 725, 735, 748, 764, 782, 799, 818, 835, 852, 871, 890, 906, 922, 941, 960, 975, 990, 1001, 1012, 1028, 1045, 1062, 1081, 1110, 1139, 1160, 1172, 1188, 1205, 1224, 1240, 1259, 1285, 1313, 1341, 1360, 1380, 1401, 1422, 1437, 1446, 1461, 1466, 1474, 1491, 1505, 1515, 1525, 1535, 1545, 1556, 1566, 1573, 1583, 1591, 1596, 1609, 1618, 1631, 1639, 1646, 1660, 1675, 1694, 1714, 1734, 1753, 1769, 1791, 1808, 1827, 1853, 1870, 1889, 1903, 1920, 1933, 1952, 1964, 1975, 1990, 2003, 2018, 2032, 2049, 2062, 2078, 2095, 2115, 2130, 2150, 2170, 2190, 2206, 2221, 2242, 2257, 2273, 2291, 2308, 2324, 2341, 2360, 2375, 2389, 2406, 2420, 2432, 2449, 2460, 2472, 2485, 2499, 2516, 2524, 2529, 2540, 2550, 2567, 2588, 2609, 2627, 2643, 2661, 2678, 2696, 2706, 2725, 2740, 2744}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
