// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBoolValue-1]
	_ = x[MemoryKindAddressValue-2]
	_ = x[MemoryKindStringValue-3]
	_ = x[MemoryKindCharacterValue-4]
	_ = x[MemoryKindNumberValue-5]
	_ = x[MemoryKindArrayValueBase-6]
	_ = x[MemoryKindDictionaryValueBase-7]
	_ = x[MemoryKindCompositeValueBase-8]
	_ = x[MemoryKindSimpleCompositeValueBase-9]
	_ = x[MemoryKindOptionalValue-10]
	_ = x[MemoryKindNilValue-11]
	_ = x[MemoryKindVoidValue-12]
	_ = x[MemoryKindTypeValue-13]
	_ = x[MemoryKindPathValue-14]
	_ = x[MemoryKindCapabilityValue-15]
	_ = x[MemoryKindLinkValue-16]
	_ = x[MemoryKindStorageReferenceValue-17]
	_ = x[MemoryKindEphemeralReferenceValue-18]
	_ = x[MemoryKindInterpretedFunctionValue-19]
	_ = x[MemoryKindHostFunctionValue-20]
	_ = x[MemoryKindBoundFunctionValue-21]
	_ = x[MemoryKindBigInt-22]
	_ = x[MemoryKindSimpleCompositeValue-23]
	_ = x[MemoryKindPublishedValue-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindAtreeEncodedSlab-32]
	_ = x[MemoryKindPrimitiveStaticType-33]
	_ = x[MemoryKindCompositeStaticType-34]
	_ = x[MemoryKindInterfaceStaticType-35]
	_ = x[MemoryKindVariableSizedStaticType-36]
	_ = x[MemoryKindConstantSizedStaticType-37]
	_ = x[MemoryKindDictionaryStaticType-38]
	_ = x[MemoryKindOptionalStaticType-39]
	_ = x[MemoryKindRestrictedStaticType-40]
	_ = x[MemoryKindReferenceStaticType-41]
	_ = x[MemoryKindCapabilityStaticType-42]
	_ = x[MemoryKindFunctionStaticType-43]
	_ = x[MemoryKindCadenceVoidValue-44]
	_ = x[MemoryKindCadenceOptionalValue-45]
	_ = x[MemoryKindCadenceBoolValue-46]
	_ = x[MemoryKindCadenceStringValue-47]
	_ = x[MemoryKindCadenceCharacterValue-48]
	_ = x[MemoryKindCadenceAddressValue-49]
	_ = x[MemoryKindCadenceIntValue-50]
	_ = x[MemoryKindCadenceNumberValue-51]
	_ = x[MemoryKindCadenceArrayValueBase-52]
	_ = x[MemoryKindCadenceArrayValueLength-53]
	_ = x[MemoryKindCadenceDictionaryValue-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructValueBase-56]
	_ = x[MemoryKindCadenceStructValueSize-57]
	_ = x[MemoryKindCadenceResourceValueBase-58]
	_ = x[MemoryKindCadenceResourceValueSize-59]
	_ = x[MemoryKindCadenceEventValueBase-60]
	_ = x[MemoryKindCadenceEventValueSize-61]
	_ = x[MemoryKindCadenceContractValueBase-62]
	_ = x[MemoryKindCadenceContractValueSize-63]
	_ = x[MemoryKindCadenceEnumValueBase-64]
	_ = x[MemoryKindCadenceEnumValueSize-65]
	_ = x[MemoryKindCadenceLinkValue-66]
	_ = x[MemoryKindCadencePathValue-67]
	_ = x[MemoryKindCadenceTypeValue-68]
	_ = x[MemoryKindCadenceCapabilityValue-69]
	_ = x[MemoryKindCadenceFunctionValue-70]
	_ = x[MemoryKindCadenceSimpleType-71]
	_ = x[MemoryKindCadenceOptionalType-72]
	_ = x[MemoryKindCadenceVariableSizedArrayType-73]
	_ = x[MemoryKindCadenceConstantSizedArrayType-74]
	_ = x[MemoryKindCadenceDictionaryType-75]
	_ = x[MemoryKindCadenceField-76]
	_ = x[MemoryKindCadenceParameter-77]
	_ = x[MemoryKindCadenceStructType-78]
	_ = x[MemoryKindCadenceResourceType-79]
	_ = x[MemoryKindCadenceEventType-80]
	_ = x[MemoryKindCadenceContractType-81]
	_ = x[MemoryKindCadenceStructInterfaceType-82]
	_ = x[MemoryKindCadenceResourceInterfaceType-83]
	_ = x[MemoryKindCadenceContractInterfaceType-84]
	_ = x[MemoryKindCadenceFunctionType-85]
	_ = x[MemoryKindCadenceReferenceType-86]
	_ = x[MemoryKindCadenceRestrictedType-87]
	_ = x[MemoryKindCadenceCapabilityType-88]
	_ = x[MemoryKindCadenceEnumType-89]
	_ = x[MemoryKindRawString-90]
	_ = x[MemoryKindAddressLocation-91]
	_ = x[MemoryKindBytes-92]
	_ = x[MemoryKindVariable-93]
	_ = x[MemoryKindCompositeTypeInfo-94]
	_ = x[MemoryKindCompositeField-95]
	_ = x[MemoryKindInvocation-96]
	_ = x[MemoryKindStorageMap-97]
	_ = x[MemoryKindStorageKey-98]
	_ = x[MemoryKindTypeToken-99]
	_ = x[MemoryKindErrorToken-100]
	_ = x[MemoryKindSpaceToken-101]
	_ = x[MemoryKindProgram-102]
	_ = x[MemoryKindIdentifier-103]
	_ = x[MemoryKindArgument-104]
	_ = x[MemoryKindBlock-105]
	_ = x[MemoryKindFunctionBlock-106]
	_ = x[MemoryKindParameter-107]
	_ = x[MemoryKindParameterList-108]
	_ = x[MemoryKindTypeParameter-109]
	_ = x[MemoryKindTypeParameterList-110]
	_ = x[MemoryKindTransfer-111]
	_ = x[MemoryKindMembers-112]
	_ = x[MemoryKindTypeAnnotation-113]
	_ = x[MemoryKindDictionaryEntry-114]
	_ = x[MemoryKindFunctionDeclaration-115]
	_ = x[MemoryKindCompositeDeclaration-116]
	_ = x[MemoryKindInterfaceDeclaration-117]
	_ = x[MemoryKindEnumCaseDeclaration-118]
	_ = x[MemoryKindFieldDeclaration-119]
	_ = x[MemoryKindTransactionDeclaration-120]
	_ = x[MemoryKindImportDeclaration-121]
	_ = x[MemoryKindVariableDeclaration-122]
	_ = x[MemoryKindSpecialFunctionDeclaration-123]
	_ = x[MemoryKindPragmaDeclaration-124]
	_ = x[MemoryKindAssignmentStatement-125]
	_ = x[MemoryKindBreakStatement-126]
	_ = x[MemoryKindContinueStatement-127]
	_ = x[MemoryKindEmitStatement-128]
	_ = x[MemoryKindExpressionStatement-129]
	_ = x[MemoryKindForStatement-130]
	_ = x[MemoryKindIfStatement-131]
	_ = x[MemoryKindReturnStatement-132]
	_ = x[MemoryKindSwapStatement-133]
	_ = x[MemoryKindSwitchStatement-134]
	_ = x[MemoryKindWhileStatement-135]
	_ = x[MemoryKindBooleanExpression-136]
	_ = x[MemoryKindNilExpression-137]
	_ = x[MemoryKindStringExpression-138]
	_ = x[MemoryKindIntegerExpression-139]
	_ = x[MemoryKindFixedPointExpression-140]
	_ = x[MemoryKindArrayExpression-141]
	_ = x[MemoryKindDictionaryExpression-142]
	_ = x[MemoryKindIdentifierExpression-143]
	_ = x[MemoryKindInvocationExpression-144]
	_ = x[MemoryKindMemberExpression-145]
	_ = x[MemoryKindIndexExpression-146]
	_ = x[MemoryKindConditionalExpression-147]
	_ = x[MemoryKindUnaryExpression-148]
	_ = x[MemoryKindBinaryExpression-149]
	_ = x[MemoryKindFunctionExpression-150]
	_ = x[MemoryKindCastingExpression-151]
	_ = x[MemoryKindCreateExpression-152]
	_ = x[MemoryKindDestroyExpression-153]
	_ = x[MemoryKindReferenceExpression-154]
	_ = x[MemoryKindForceExpression-155]
	_ = x[MemoryKindPathExpression-156]
	_ = x[MemoryKindConstantSizedType-157]
	_ = x[MemoryKindDictionaryType-158]
	_ = x[MemoryKindFunctionType-159]
	_ = x[MemoryKindInstantiationType-160]
	_ = x[MemoryKindNominalType-161]
	_ = x[MemoryKindOptionalType-162]
	_ = x[MemoryKindReferenceType-163]
	_ = x[MemoryKindRestrictedType-164]
	_ = x[MemoryKindVariableSizedType-165]
	_ = x[MemoryKindPosition-166]
	_ = x[MemoryKindRange-167]
	_ = x[MemoryKindElaboration-168]
	_ = x[MemoryKindActivation-169]
	_ = x[MemoryKindActivationEntries-170]
	_ = x[MemoryKindVariableSizedSemaType-171]
	_ = x[MemoryKindConstantSizedSemaType-172]
	_ = x[MemoryKindDictionarySemaType-173]
	_ = x[MemoryKindOptionalSemaType-174]
	_ = x[MemoryKindRestrictedSemaType-175]
	_ = x[MemoryKindReferenceSemaType-176]
	_ = x[MemoryKindCapabilitySemaType-177]
	_ = x[MemoryKindOrderedMap-178]
	_ = x[MemoryKindOrderedMapEntryList-179]
	_ = x[MemoryKindOrderedMapEntry-180]
	_ = x[MemoryKindLast-181]
}

const _MemoryKind_name = "UnknownBoolValueAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueNilValueVoidValueTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTypeParameterTypeParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 16, 28, 39, 53, 64, 78, 97, 115, 139, 152, 160, 169, 178, 187, 202, 211, 232, 255, 279, 296, 314, 320, 340, 354, 372, 394, 419, 435, 455, 478, 505, 521, 540, 559, 578, 601, 624, 644, 662, 682, 701, 721, 739, 755, 775, 791, 809, 830, 849, 864, 882, 903, 926, 948, 967, 989, 1011, 1035, 1059, 1080, 1101, 1125, 1149, 1169, 1189, 1205, 1221, 1237, 1259, 1279, 1296, 1315, 1344, 1373, 1394, 1406, 1422, 1439, 1458, 1474, 1493, 1519, 1547, 1575, 1594, 1614, 1635, 1656, 1671, 1680, 1695, 1700, 1708, 1725, 1739, 1749, 1759, 1769, 1778, 1788, 1798, 1805, 1815, 1823, 1828, 1841, 1850, 1863, 1876, 1893, 1901, 1908, 1922, 1937, 1956, 1976, 1996, 2015, 2031, 2053, 2070, 2089, 2115, 2132, 2151, 2165, 2182, 2195, 2214, 2226, 2237, 2252, 2265, 2280, 2294, 2311, 2324, 2340, 2357, 2377, 2392, 2412, 2432, 2452, 2468, 2483, 2504, 2519, 2535, 2553, 2570, 2586, 2603, 2622, 2637, 2651, 2668, 2682, 2694, 2711, 2722, 2734, 2747, 2761, 2778, 2786, 2791, 2802, 2812, 2829, 2850, 2871, 2889, 2905, 2923, 2940, 2958, 2968, 2987, 3002, 3006}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
