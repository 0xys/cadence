// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindBool-1]
	_ = x[MemoryKindAddress-2]
	_ = x[MemoryKindString-3]
	_ = x[MemoryKindCharacter-4]
	_ = x[MemoryKindMetaType-5]
	_ = x[MemoryKindNumber-6]
	_ = x[MemoryKindArrayBase-7]
	_ = x[MemoryKindDictionaryBase-8]
	_ = x[MemoryKindCompositeBase-9]
	_ = x[MemoryKindSimpleCompositeBase-10]
	_ = x[MemoryKindOptional-11]
	_ = x[MemoryKindNil-12]
	_ = x[MemoryKindVoid-13]
	_ = x[MemoryKindTypeValue-14]
	_ = x[MemoryKindPathValue-15]
	_ = x[MemoryKindCapabilityValue-16]
	_ = x[MemoryKindLinkValue-17]
	_ = x[MemoryKindStorageReferenceValue-18]
	_ = x[MemoryKindEphemeralReferenceValue-19]
	_ = x[MemoryKindInterpretedFunction-20]
	_ = x[MemoryKindHostFunction-21]
	_ = x[MemoryKindBoundFunction-22]
	_ = x[MemoryKindBigInt-23]
	_ = x[MemoryKindSimpleComposite-24]
	_ = x[MemoryKindAtreeArrayDataSlab-25]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-26]
	_ = x[MemoryKindAtreeArrayElementOverhead-27]
	_ = x[MemoryKindAtreeMapDataSlab-28]
	_ = x[MemoryKindAtreeMapMetaDataSlab-29]
	_ = x[MemoryKindAtreeMapElementOverhead-30]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-31]
	_ = x[MemoryKindPrimitiveStaticType-32]
	_ = x[MemoryKindCompositeStaticType-33]
	_ = x[MemoryKindInterfaceStaticType-34]
	_ = x[MemoryKindVariableSizedStaticType-35]
	_ = x[MemoryKindConstantSizedStaticType-36]
	_ = x[MemoryKindDictionaryStaticType-37]
	_ = x[MemoryKindOptionalStaticType-38]
	_ = x[MemoryKindRestrictedStaticType-39]
	_ = x[MemoryKindReferenceStaticType-40]
	_ = x[MemoryKindCapabilityStaticType-41]
	_ = x[MemoryKindFunctionStaticType-42]
	_ = x[MemoryKindCadenceVoid-43]
	_ = x[MemoryKindCadenceOptional-44]
	_ = x[MemoryKindCadenceBool-45]
	_ = x[MemoryKindCadenceString-46]
	_ = x[MemoryKindCadenceCharacter-47]
	_ = x[MemoryKindCadenceAddress-48]
	_ = x[MemoryKindCadenceInt-49]
	_ = x[MemoryKindCadenceNumber-50]
	_ = x[MemoryKindCadenceArrayBase-51]
	_ = x[MemoryKindCadenceArrayLength-52]
	_ = x[MemoryKindCadenceDictionaryBase-53]
	_ = x[MemoryKindCadenceDictionarySize-54]
	_ = x[MemoryKindCadenceKeyValuePair-55]
	_ = x[MemoryKindCadenceStructBase-56]
	_ = x[MemoryKindCadenceStructSize-57]
	_ = x[MemoryKindCadenceResourceBase-58]
	_ = x[MemoryKindCadenceResourceSize-59]
	_ = x[MemoryKindCadenceEventBase-60]
	_ = x[MemoryKindCadenceEventSize-61]
	_ = x[MemoryKindCadenceContractBase-62]
	_ = x[MemoryKindCadenceContractSize-63]
	_ = x[MemoryKindCadenceEnumBase-64]
	_ = x[MemoryKindCadenceEnumSize-65]
	_ = x[MemoryKindCadenceLink-66]
	_ = x[MemoryKindCadencePath-67]
	_ = x[MemoryKindCadenceTypeValue-68]
	_ = x[MemoryKindCadenceCapability-69]
	_ = x[MemoryKindCadenceSimpleType-70]
	_ = x[MemoryKindCadenceOptionalType-71]
	_ = x[MemoryKindCadenceVariableSizedArrayType-72]
	_ = x[MemoryKindCadenceConstantSizedArrayType-73]
	_ = x[MemoryKindCadenceDictionaryType-74]
	_ = x[MemoryKindCadenceField-75]
	_ = x[MemoryKindCadenceParameter-76]
	_ = x[MemoryKindCadenceStructType-77]
	_ = x[MemoryKindCadenceResourceType-78]
	_ = x[MemoryKindCadenceEventType-79]
	_ = x[MemoryKindCadenceContractType-80]
	_ = x[MemoryKindCadenceStructInterfaceType-81]
	_ = x[MemoryKindCadenceResourceInterfaceType-82]
	_ = x[MemoryKindCadenceContractInterfaceType-83]
	_ = x[MemoryKindCadenceFunctionType-84]
	_ = x[MemoryKindCadenceReferenceType-85]
	_ = x[MemoryKindCadenceRestrictedType-86]
	_ = x[MemoryKindCadenceCapabilityType-87]
	_ = x[MemoryKindCadenceEnumType-88]
	_ = x[MemoryKindRawString-89]
	_ = x[MemoryKindAddressLocation-90]
	_ = x[MemoryKindBytes-91]
	_ = x[MemoryKindVariable-92]
	_ = x[MemoryKindCompositeTypeInfo-93]
	_ = x[MemoryKindCompositeField-94]
	_ = x[MemoryKindInvocation-95]
	_ = x[MemoryKindStorageMap-96]
	_ = x[MemoryKindValueToken-97]
	_ = x[MemoryKindSyntaxToken-98]
	_ = x[MemoryKindSpaceToken-99]
	_ = x[MemoryKindProgram-100]
	_ = x[MemoryKindIdentifier-101]
	_ = x[MemoryKindArgument-102]
	_ = x[MemoryKindBlock-103]
	_ = x[MemoryKindFunctionBlock-104]
	_ = x[MemoryKindParameter-105]
	_ = x[MemoryKindParameterList-106]
	_ = x[MemoryKindTransfer-107]
	_ = x[MemoryKindMembers-108]
	_ = x[MemoryKindTypeAnnotation-109]
	_ = x[MemoryKindDictionaryEntry-110]
	_ = x[MemoryKindFunctionDeclaration-111]
	_ = x[MemoryKindCompositeDeclaration-112]
	_ = x[MemoryKindInterfaceDeclaration-113]
	_ = x[MemoryKindEnumCaseDeclaration-114]
	_ = x[MemoryKindFieldDeclaration-115]
	_ = x[MemoryKindTransactionDeclaration-116]
	_ = x[MemoryKindImportDeclaration-117]
	_ = x[MemoryKindVariableDeclaration-118]
	_ = x[MemoryKindSpecialFunctionDeclaration-119]
	_ = x[MemoryKindPragmaDeclaration-120]
	_ = x[MemoryKindAssignmentStatement-121]
	_ = x[MemoryKindBreakStatement-122]
	_ = x[MemoryKindContinueStatement-123]
	_ = x[MemoryKindEmitStatement-124]
	_ = x[MemoryKindExpressionStatement-125]
	_ = x[MemoryKindForStatement-126]
	_ = x[MemoryKindIfStatement-127]
	_ = x[MemoryKindReturnStatement-128]
	_ = x[MemoryKindSwapStatement-129]
	_ = x[MemoryKindSwitchStatement-130]
	_ = x[MemoryKindWhileStatement-131]
	_ = x[MemoryKindBooleanExpression-132]
	_ = x[MemoryKindNilExpression-133]
	_ = x[MemoryKindStringExpression-134]
	_ = x[MemoryKindIntegerExpression-135]
	_ = x[MemoryKindFixedPointExpression-136]
	_ = x[MemoryKindArrayExpression-137]
	_ = x[MemoryKindDictionaryExpression-138]
	_ = x[MemoryKindIdentifierExpression-139]
	_ = x[MemoryKindInvocationExpression-140]
	_ = x[MemoryKindMemberExpression-141]
	_ = x[MemoryKindIndexExpression-142]
	_ = x[MemoryKindConditionalExpression-143]
	_ = x[MemoryKindUnaryExpression-144]
	_ = x[MemoryKindBinaryExpression-145]
	_ = x[MemoryKindFunctionExpression-146]
	_ = x[MemoryKindCastingExpression-147]
	_ = x[MemoryKindCreateExpression-148]
	_ = x[MemoryKindDestroyExpression-149]
	_ = x[MemoryKindReferenceExpression-150]
	_ = x[MemoryKindForceExpression-151]
	_ = x[MemoryKindPathExpression-152]
	_ = x[MemoryKindConstantSizedType-153]
	_ = x[MemoryKindDictionaryType-154]
	_ = x[MemoryKindFunctionType-155]
	_ = x[MemoryKindInstantiationType-156]
	_ = x[MemoryKindNominalType-157]
	_ = x[MemoryKindOptionalType-158]
	_ = x[MemoryKindReferenceType-159]
	_ = x[MemoryKindRestrictedType-160]
	_ = x[MemoryKindVariableSizedType-161]
	_ = x[MemoryKindPosition-162]
	_ = x[MemoryKindRange-163]
	_ = x[MemoryKindElaboration-164]
	_ = x[MemoryKindActivation-165]
	_ = x[MemoryKindActivationEntries-166]
	_ = x[MemoryKindVariableSizedSemaType-167]
	_ = x[MemoryKindConstantSizedSemaType-168]
	_ = x[MemoryKindDictionarySemaType-169]
	_ = x[MemoryKindOptionalSemaType-170]
	_ = x[MemoryKindRestrictedSemaType-171]
	_ = x[MemoryKindReferenceSemaType-172]
	_ = x[MemoryKindCapabilitySemaType-173]
	_ = x[MemoryKindOrderedMap-174]
	_ = x[MemoryKindOrderedMapEntryList-175]
	_ = x[MemoryKindOrderedMapEntry-176]
	_ = x[MemoryKindLast-177]
}

const _MemoryKind_name = "UnknownBoolAddressStringCharacterMetaTypeNumberArrayBaseDictionaryBaseCompositeBaseSimpleCompositeBaseOptionalNilVoidTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionHostFunctionBoundFunctionBigIntSimpleCompositeAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidCadenceOptionalCadenceBoolCadenceStringCadenceCharacterCadenceAddressCadenceIntCadenceNumberCadenceArrayBaseCadenceArrayLengthCadenceDictionaryBaseCadenceDictionarySizeCadenceKeyValuePairCadenceStructBaseCadenceStructSizeCadenceResourceBaseCadenceResourceSizeCadenceEventBaseCadenceEventSizeCadenceContractBaseCadenceContractSizeCadenceEnumBaseCadenceEnumSizeCadenceLinkCadencePathCadenceTypeValueCadenceCapabilityCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapValueTokenSyntaxTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 11, 18, 24, 33, 41, 47, 56, 70, 83, 102, 110, 113, 117, 126, 135, 150, 159, 180, 203, 222, 234, 247, 253, 268, 286, 308, 333, 349, 369, 392, 419, 438, 457, 476, 499, 522, 542, 560, 580, 599, 619, 637, 648, 663, 674, 687, 703, 717, 727, 740, 756, 774, 795, 816, 835, 852, 869, 888, 907, 923, 939, 958, 977, 992, 1007, 1018, 1029, 1045, 1062, 1079, 1098, 1127, 1156, 1177, 1189, 1205, 1222, 1241, 1257, 1276, 1302, 1330, 1358, 1377, 1397, 1418, 1439, 1454, 1463, 1478, 1483, 1491, 1508, 1522, 1532, 1542, 1552, 1563, 1573, 1580, 1590, 1598, 1603, 1616, 1625, 1638, 1646, 1653, 1667, 1682, 1701, 1721, 1741, 1760, 1776, 1798, 1815, 1834, 1860, 1877, 1896, 1910, 1927, 1940, 1959, 1971, 1982, 1997, 2010, 2025, 2039, 2056, 2069, 2085, 2102, 2122, 2137, 2157, 2177, 2197, 2213, 2228, 2249, 2264, 2280, 2298, 2315, 2331, 2348, 2367, 2382, 2396, 2413, 2427, 2439, 2456, 2467, 2479, 2492, 2506, 2523, 2531, 2536, 2547, 2557, 2574, 2595, 2616, 2634, 2650, 2668, 2685, 2703, 2713, 2732, 2747, 2751}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
