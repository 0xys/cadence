// Code generated by "stringer -type=MemoryKind -trimprefix=MemoryKind"; DO NOT EDIT.

package common

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MemoryKindUnknown-0]
	_ = x[MemoryKindAddressValue-1]
	_ = x[MemoryKindStringValue-2]
	_ = x[MemoryKindCharacterValue-3]
	_ = x[MemoryKindNumberValue-4]
	_ = x[MemoryKindArrayValueBase-5]
	_ = x[MemoryKindDictionaryValueBase-6]
	_ = x[MemoryKindCompositeValueBase-7]
	_ = x[MemoryKindSimpleCompositeValueBase-8]
	_ = x[MemoryKindOptionalValue-9]
	_ = x[MemoryKindTypeValue-10]
	_ = x[MemoryKindPathValue-11]
	_ = x[MemoryKindCapabilityValue-12]
	_ = x[MemoryKindLinkValue-13]
	_ = x[MemoryKindStorageReferenceValue-14]
	_ = x[MemoryKindEphemeralReferenceValue-15]
	_ = x[MemoryKindInterpretedFunctionValue-16]
	_ = x[MemoryKindHostFunctionValue-17]
	_ = x[MemoryKindBoundFunctionValue-18]
	_ = x[MemoryKindBigInt-19]
	_ = x[MemoryKindSimpleCompositeValue-20]
	_ = x[MemoryKindPublishedValue-21]
	_ = x[MemoryKindAtreeArrayDataSlab-22]
	_ = x[MemoryKindAtreeArrayMetaDataSlab-23]
	_ = x[MemoryKindAtreeArrayElementOverhead-24]
	_ = x[MemoryKindAtreeMapDataSlab-25]
	_ = x[MemoryKindAtreeMapMetaDataSlab-26]
	_ = x[MemoryKindAtreeMapElementOverhead-27]
	_ = x[MemoryKindAtreeMapPreAllocatedElement-28]
	_ = x[MemoryKindAtreeEncodedSlab-29]
	_ = x[MemoryKindPrimitiveStaticType-30]
	_ = x[MemoryKindCompositeStaticType-31]
	_ = x[MemoryKindInterfaceStaticType-32]
	_ = x[MemoryKindVariableSizedStaticType-33]
	_ = x[MemoryKindConstantSizedStaticType-34]
	_ = x[MemoryKindDictionaryStaticType-35]
	_ = x[MemoryKindOptionalStaticType-36]
	_ = x[MemoryKindRestrictedStaticType-37]
	_ = x[MemoryKindReferenceStaticType-38]
	_ = x[MemoryKindCapabilityStaticType-39]
	_ = x[MemoryKindFunctionStaticType-40]
	_ = x[MemoryKindCadenceVoidValue-41]
	_ = x[MemoryKindCadenceOptionalValue-42]
	_ = x[MemoryKindCadenceBoolValue-43]
	_ = x[MemoryKindCadenceStringValue-44]
	_ = x[MemoryKindCadenceCharacterValue-45]
	_ = x[MemoryKindCadenceAddressValue-46]
	_ = x[MemoryKindCadenceIntValue-47]
	_ = x[MemoryKindCadenceNumberValue-48]
	_ = x[MemoryKindCadenceArrayValueBase-49]
	_ = x[MemoryKindCadenceArrayValueLength-50]
	_ = x[MemoryKindCadenceDictionaryValue-51]
	_ = x[MemoryKindCadenceKeyValuePair-52]
	_ = x[MemoryKindCadenceStructValueBase-53]
	_ = x[MemoryKindCadenceStructValueSize-54]
	_ = x[MemoryKindCadenceResourceValueBase-55]
	_ = x[MemoryKindCadenceResourceValueSize-56]
	_ = x[MemoryKindCadenceEventValueBase-57]
	_ = x[MemoryKindCadenceEventValueSize-58]
	_ = x[MemoryKindCadenceContractValueBase-59]
	_ = x[MemoryKindCadenceContractValueSize-60]
	_ = x[MemoryKindCadenceEnumValueBase-61]
	_ = x[MemoryKindCadenceEnumValueSize-62]
	_ = x[MemoryKindCadenceLinkValue-63]
	_ = x[MemoryKindCadencePathValue-64]
	_ = x[MemoryKindCadenceTypeValue-65]
	_ = x[MemoryKindCadenceCapabilityValue-66]
	_ = x[MemoryKindCadenceFunctionValue-67]
	_ = x[MemoryKindCadenceSimpleType-68]
	_ = x[MemoryKindCadenceOptionalType-69]
	_ = x[MemoryKindCadenceVariableSizedArrayType-70]
	_ = x[MemoryKindCadenceConstantSizedArrayType-71]
	_ = x[MemoryKindCadenceDictionaryType-72]
	_ = x[MemoryKindCadenceField-73]
	_ = x[MemoryKindCadenceParameter-74]
	_ = x[MemoryKindCadenceStructType-75]
	_ = x[MemoryKindCadenceResourceType-76]
	_ = x[MemoryKindCadenceEventType-77]
	_ = x[MemoryKindCadenceContractType-78]
	_ = x[MemoryKindCadenceStructInterfaceType-79]
	_ = x[MemoryKindCadenceResourceInterfaceType-80]
	_ = x[MemoryKindCadenceContractInterfaceType-81]
	_ = x[MemoryKindCadenceFunctionType-82]
	_ = x[MemoryKindCadenceReferenceType-83]
	_ = x[MemoryKindCadenceRestrictedType-84]
	_ = x[MemoryKindCadenceCapabilityType-85]
	_ = x[MemoryKindCadenceEnumType-86]
	_ = x[MemoryKindRawString-87]
	_ = x[MemoryKindAddressLocation-88]
	_ = x[MemoryKindBytes-89]
	_ = x[MemoryKindVariable-90]
	_ = x[MemoryKindCompositeTypeInfo-91]
	_ = x[MemoryKindCompositeField-92]
	_ = x[MemoryKindInvocation-93]
	_ = x[MemoryKindStorageMap-94]
	_ = x[MemoryKindStorageKey-95]
	_ = x[MemoryKindTypeToken-96]
	_ = x[MemoryKindErrorToken-97]
	_ = x[MemoryKindSpaceToken-98]
	_ = x[MemoryKindProgram-99]
	_ = x[MemoryKindIdentifier-100]
	_ = x[MemoryKindArgument-101]
	_ = x[MemoryKindBlock-102]
	_ = x[MemoryKindFunctionBlock-103]
	_ = x[MemoryKindParameter-104]
	_ = x[MemoryKindParameterList-105]
	_ = x[MemoryKindTransfer-106]
	_ = x[MemoryKindMembers-107]
	_ = x[MemoryKindTypeAnnotation-108]
	_ = x[MemoryKindDictionaryEntry-109]
	_ = x[MemoryKindFunctionDeclaration-110]
	_ = x[MemoryKindCompositeDeclaration-111]
	_ = x[MemoryKindInterfaceDeclaration-112]
	_ = x[MemoryKindEnumCaseDeclaration-113]
	_ = x[MemoryKindFieldDeclaration-114]
	_ = x[MemoryKindTransactionDeclaration-115]
	_ = x[MemoryKindImportDeclaration-116]
	_ = x[MemoryKindVariableDeclaration-117]
	_ = x[MemoryKindSpecialFunctionDeclaration-118]
	_ = x[MemoryKindPragmaDeclaration-119]
	_ = x[MemoryKindAssignmentStatement-120]
	_ = x[MemoryKindBreakStatement-121]
	_ = x[MemoryKindContinueStatement-122]
	_ = x[MemoryKindEmitStatement-123]
	_ = x[MemoryKindExpressionStatement-124]
	_ = x[MemoryKindForStatement-125]
	_ = x[MemoryKindIfStatement-126]
	_ = x[MemoryKindReturnStatement-127]
	_ = x[MemoryKindSwapStatement-128]
	_ = x[MemoryKindSwitchStatement-129]
	_ = x[MemoryKindWhileStatement-130]
	_ = x[MemoryKindBooleanExpression-131]
	_ = x[MemoryKindVoidExpression-132]
	_ = x[MemoryKindNilExpression-133]
	_ = x[MemoryKindStringExpression-134]
	_ = x[MemoryKindIntegerExpression-135]
	_ = x[MemoryKindFixedPointExpression-136]
	_ = x[MemoryKindArrayExpression-137]
	_ = x[MemoryKindDictionaryExpression-138]
	_ = x[MemoryKindIdentifierExpression-139]
	_ = x[MemoryKindInvocationExpression-140]
	_ = x[MemoryKindMemberExpression-141]
	_ = x[MemoryKindIndexExpression-142]
	_ = x[MemoryKindConditionalExpression-143]
	_ = x[MemoryKindUnaryExpression-144]
	_ = x[MemoryKindBinaryExpression-145]
	_ = x[MemoryKindFunctionExpression-146]
	_ = x[MemoryKindCastingExpression-147]
	_ = x[MemoryKindCreateExpression-148]
	_ = x[MemoryKindDestroyExpression-149]
	_ = x[MemoryKindReferenceExpression-150]
	_ = x[MemoryKindForceExpression-151]
	_ = x[MemoryKindPathExpression-152]
	_ = x[MemoryKindConstantSizedType-153]
	_ = x[MemoryKindDictionaryType-154]
	_ = x[MemoryKindFunctionType-155]
	_ = x[MemoryKindInstantiationType-156]
	_ = x[MemoryKindNominalType-157]
	_ = x[MemoryKindOptionalType-158]
	_ = x[MemoryKindReferenceType-159]
	_ = x[MemoryKindRestrictedType-160]
	_ = x[MemoryKindVariableSizedType-161]
	_ = x[MemoryKindPosition-162]
	_ = x[MemoryKindRange-163]
	_ = x[MemoryKindElaboration-164]
	_ = x[MemoryKindActivation-165]
	_ = x[MemoryKindActivationEntries-166]
	_ = x[MemoryKindVariableSizedSemaType-167]
	_ = x[MemoryKindConstantSizedSemaType-168]
	_ = x[MemoryKindDictionarySemaType-169]
	_ = x[MemoryKindOptionalSemaType-170]
	_ = x[MemoryKindRestrictedSemaType-171]
	_ = x[MemoryKindReferenceSemaType-172]
	_ = x[MemoryKindCapabilitySemaType-173]
	_ = x[MemoryKindOrderedMap-174]
	_ = x[MemoryKindOrderedMapEntryList-175]
	_ = x[MemoryKindOrderedMapEntry-176]
	_ = x[MemoryKindLast-177]
}

const _MemoryKind_name = "UnknownAddressValueStringValueCharacterValueNumberValueArrayValueBaseDictionaryValueBaseCompositeValueBaseSimpleCompositeValueBaseOptionalValueTypeValuePathValueCapabilityValueLinkValueStorageReferenceValueEphemeralReferenceValueInterpretedFunctionValueHostFunctionValueBoundFunctionValueBigIntSimpleCompositeValuePublishedValueAtreeArrayDataSlabAtreeArrayMetaDataSlabAtreeArrayElementOverheadAtreeMapDataSlabAtreeMapMetaDataSlabAtreeMapElementOverheadAtreeMapPreAllocatedElementAtreeEncodedSlabPrimitiveStaticTypeCompositeStaticTypeInterfaceStaticTypeVariableSizedStaticTypeConstantSizedStaticTypeDictionaryStaticTypeOptionalStaticTypeRestrictedStaticTypeReferenceStaticTypeCapabilityStaticTypeFunctionStaticTypeCadenceVoidValueCadenceOptionalValueCadenceBoolValueCadenceStringValueCadenceCharacterValueCadenceAddressValueCadenceIntValueCadenceNumberValueCadenceArrayValueBaseCadenceArrayValueLengthCadenceDictionaryValueCadenceKeyValuePairCadenceStructValueBaseCadenceStructValueSizeCadenceResourceValueBaseCadenceResourceValueSizeCadenceEventValueBaseCadenceEventValueSizeCadenceContractValueBaseCadenceContractValueSizeCadenceEnumValueBaseCadenceEnumValueSizeCadenceLinkValueCadencePathValueCadenceTypeValueCadenceCapabilityValueCadenceFunctionValueCadenceSimpleTypeCadenceOptionalTypeCadenceVariableSizedArrayTypeCadenceConstantSizedArrayTypeCadenceDictionaryTypeCadenceFieldCadenceParameterCadenceStructTypeCadenceResourceTypeCadenceEventTypeCadenceContractTypeCadenceStructInterfaceTypeCadenceResourceInterfaceTypeCadenceContractInterfaceTypeCadenceFunctionTypeCadenceReferenceTypeCadenceRestrictedTypeCadenceCapabilityTypeCadenceEnumTypeRawStringAddressLocationBytesVariableCompositeTypeInfoCompositeFieldInvocationStorageMapStorageKeyTypeTokenErrorTokenSpaceTokenProgramIdentifierArgumentBlockFunctionBlockParameterParameterListTransferMembersTypeAnnotationDictionaryEntryFunctionDeclarationCompositeDeclarationInterfaceDeclarationEnumCaseDeclarationFieldDeclarationTransactionDeclarationImportDeclarationVariableDeclarationSpecialFunctionDeclarationPragmaDeclarationAssignmentStatementBreakStatementContinueStatementEmitStatementExpressionStatementForStatementIfStatementReturnStatementSwapStatementSwitchStatementWhileStatementBooleanExpressionVoidExpressionNilExpressionStringExpressionIntegerExpressionFixedPointExpressionArrayExpressionDictionaryExpressionIdentifierExpressionInvocationExpressionMemberExpressionIndexExpressionConditionalExpressionUnaryExpressionBinaryExpressionFunctionExpressionCastingExpressionCreateExpressionDestroyExpressionReferenceExpressionForceExpressionPathExpressionConstantSizedTypeDictionaryTypeFunctionTypeInstantiationTypeNominalTypeOptionalTypeReferenceTypeRestrictedTypeVariableSizedTypePositionRangeElaborationActivationActivationEntriesVariableSizedSemaTypeConstantSizedSemaTypeDictionarySemaTypeOptionalSemaTypeRestrictedSemaTypeReferenceSemaTypeCapabilitySemaTypeOrderedMapOrderedMapEntryListOrderedMapEntryLast"

var _MemoryKind_index = [...]uint16{0, 7, 19, 30, 44, 55, 69, 88, 106, 130, 143, 152, 161, 176, 185, 206, 229, 253, 270, 288, 294, 314, 328, 346, 368, 393, 409, 429, 452, 479, 495, 514, 533, 552, 575, 598, 618, 636, 656, 675, 695, 713, 729, 749, 765, 783, 804, 823, 838, 856, 877, 900, 922, 941, 963, 985, 1009, 1033, 1054, 1075, 1099, 1123, 1143, 1163, 1179, 1195, 1211, 1233, 1253, 1270, 1289, 1318, 1347, 1368, 1380, 1396, 1413, 1432, 1448, 1467, 1493, 1521, 1549, 1568, 1588, 1609, 1630, 1645, 1654, 1669, 1674, 1682, 1699, 1713, 1723, 1733, 1743, 1752, 1762, 1772, 1779, 1789, 1797, 1802, 1815, 1824, 1837, 1845, 1852, 1866, 1881, 1900, 1920, 1940, 1959, 1975, 1997, 2014, 2033, 2059, 2076, 2095, 2109, 2126, 2139, 2158, 2170, 2181, 2196, 2209, 2224, 2238, 2255, 2269, 2282, 2298, 2315, 2335, 2350, 2370, 2390, 2410, 2426, 2441, 2462, 2477, 2493, 2511, 2528, 2544, 2561, 2580, 2595, 2609, 2626, 2640, 2652, 2669, 2680, 2692, 2705, 2719, 2736, 2744, 2749, 2760, 2770, 2787, 2808, 2829, 2847, 2863, 2881, 2898, 2916, 2926, 2945, 2960, 2964}

func (i MemoryKind) String() string {
	if i >= MemoryKind(len(_MemoryKind_index)-1) {
		return "MemoryKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryKind_name[_MemoryKind_index[i]:_MemoryKind_index[i+1]]
}
